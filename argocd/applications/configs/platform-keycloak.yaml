# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

# disable network policy to avoid intermittent dns issues
networkPolicy:
  enabled: false

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
postgresql:
  enabled: false

## Service configuration
##
service:
  ## @param service.type Kubernetes service type, default: LoadBalancer
  ##
  type: ClusterIP
  ports:
    http: 8080

## Keycloak authentication parameters
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
##
auth:
  ## @param auth.adminUser Keycloak administrator user
  ##
  adminUser: admin
  ## @param auth.adminPassword Keycloak administrator password for the new user
  ##
  adminPassword: ""

  passwordSecretKey: admin-password
  existingSecret: platform-keycloak

## Adds argument for enabling legacy logout redirect
## This is needed for the Grafana client integration which does not currently support the new way keycloak does single sign-out.
## Keycloak mentions that this legacy feature will be removed in Keycloak 23.0.
extraStartupArgs: >-
        --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true
        --spi-brute-force-protector-default-brute-force-detector-allow-concurrent-requests=true

## Configuration for keycloak-config-cli
## ref: https://github.com/adorsys/keycloak-config-cli
##
keycloakConfigCli:
  ## @param keycloakConfigCli.enabled Whether to enable keycloak-config-cli job
  ##
  enabled: true
  args:
    - --import.managed.group="no-delete"
    - --import.managed.required-action="no-delete"
    - --import.managed.role="no-delete"
    - --import.managed.client="no-delete"

  ## @param keycloakConfigCli.annotations [object] Annotations for keycloak-config-cli job
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  annotations:
    helm.sh/hook: "post-install"
    helm.sh/hook-delete-policy: "hook-succeeded"

  ## do not inject sidecar to pods for job
  podLabels:
    sidecar.istio.io/inject: "false"

  ## @param keycloakConfigCli.configuration keycloak-config-cli realms configuration
  ## NOTE: nil keys will be considered files to import locally
  ## Example:
  ## configuration:
  ##   realm1.json: |
  ##     {
  ##       "realm": "realm1",
  ##       "clients": []
  ##     }
  ##   files/realm2.yaml:
  ##   realm3.yaml: |
  ##     realm: realm3
  ##     clients: []
  ##

  # yamllint disable rule:line-length
  configuration:
    realm-master.json: |
      {
        "realm": "master",
        "accountTheme": "keycloak",
        "displayName": "Keycloak",
        "displayNameHtml": "<img src='https://raw.githubusercontent.com/open-edge-platform/orch-utils/73df5d1e99a81ae333d94b1c47dd9bef7fa03ae9/keycloak/one-edge-platform-login-title.png'></img>",
        "defaultSignatureAlgorithm": "PS512",
        "accessTokenLifespan": 3600,
        "ssoSessionIdleTimeout": 5400,
        "ssoSessionMaxLifespan": 43200,
        "passwordPolicy": "length(14) and digits(1) and specialChars(1) and upperCase(1) and lowerCase(1)",
        "bruteForceProtected": true,
        "permanentLockout": false,
        "maxFailureWaitSeconds": 900,
        "minimumQuickLoginWaitSeconds": 60,
        "waitIncrementSeconds": 300,
        "quickLoginCheckMilliSeconds": 200,
        "maxDeltaTimeSeconds": 43200,
        "failureFactor": 5,
        "roles": {
          "realm": [
            {
              "name": "en-agent-rw"
            },
            {
              "name": "secrets-root-role"
            },
            {
              "name": "rs-access-r"
            },
            {
              "name": "rs-proxy-r"
            },
            {
              "name": "app-service-proxy-read-role"
            },
            {
              "name": "app-service-proxy-write-role"
            },
            {
              "name": "app-deployment-manager-read-role"
            },
            {
              "name": "app-deployment-manager-write-role"
            },
            {
              "name": "app-resource-manager-read-role"
            },
            {
              "name": "app-resource-manager-write-role"
            },
            {
              "name": "app-vm-console-write-role"
            },
            {
              "name": "catalog-publisher-read-role"
            },
            {
              "name": "catalog-publisher-write-role"
            },
            {
              "name": "catalog-other-read-role"
            },
            {
              "name": "catalog-other-write-role"
            },
            {
              "name": "catalog-restricted-read-role"
            },
            {
              "name": "catalog-restricted-write-role"
            },
            {
              "name": "clusters-read-role"
            },
            {
              "name": "clusters-write-role"
            },
            {
              "name": "cluster-templates-read-role"
            },
            {
              "name": "cluster-templates-write-role"
            },
            {
              "name": "cluster-artifacts-read-role"
            },
            {
              "name": "cluster-artifacts-write-role"
            },
            {
              "name": "infra-manager-core-read-role"
            },
            {
              "name": "infra-manager-core-write-role"
            },
            {
              "name": "alrt-r"
            },
            {
              "name": "alrt-rw"
            },
            {
              "name": "alrt-rx-rw"
            },
            {
              "name": "ao-m2m-rw"
            },
            {
              "name": "co-m2m-rw"
            },
            {
              "name": "org-read-role"
            },
            {
              "name": "org-write-role"
            },
            {
              "name": "org-update-role"
            },
            {
              "name": "org-delete-role"
            }
          ],
          "client": {
            "alerts-m2m-client": [],
            "host-manager-m2m-client": [],
            "ktc-m2m-client": [],
            "3rd-party-host-manager-m2m-client": [],
            "edge-manager-m2m-client": [],
            "en-m2m-template-client": [],
            "webui-client": [],
            "docsui-client": [],
            "account": [
              {
                "name": "view-profile",
                "clientRole": true
              },
              {
                "name": "manage-account",
                "clientRole": true
              }
            ],
            "telemetry-client": [
              {
                "name": "admin",
                "clientRole": true
              },
              {
                "name": "viewer",
                "clientRole": true
              }
            ],
            "cluster-management-client": [
              {
                "name": "restricted-role",
                "clientRole": true
              },
              {
                "name": "standard-role",
                "clientRole": true
              },
              {
                "name": "base-role",
                "clientRole": true
              }
            ],
            "registry-client": [
              {
                "name": "registry-admin-role",
                "clientRole": true
              },
              {
                "name": "registry-editor-role",
                "clientRole": true
              },
              {
                "name": "registry-viewer-role",
                "clientRole": true
              }
            ]
          }
        },
        "clients": [
          {
            "clientId": "alerts-m2m-client",
            "name": "Alerts M2M Client",
            "description": "Client for Alerts",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "clientId": "host-manager-m2m-client",
            "name": "Host Manager Client",
            "description": "Client for the EN Host Manager to use in creating edgenode m2m clients",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.session.required": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "clientId": "ktc-m2m-client",
            "name": "Keycloak Tenant Controller client",
            "description": "Client for the Keycloak Tenant Controller to use in creating Tenant specific roles and groups in Keycloak",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.session.required": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "groups",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "clientId": "3rd-party-host-manager-m2m-client",
            "name": "3rd Party Host Manager Client",
            "description": "Client for the 3rd party Host Manager to use in creating edgenode m2m clients",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.session.required": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "clientId": "edge-manager-m2m-client",
            "name": "Edge Manager M2M Client",
            "description": "Client for the accessing Orchestrator with Edge-Manager persona",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.session.required": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "email",
              "groups",
              "basic"
            ],
            "optionalClientScopes": [
              "offline_access",
            ]
          },
          {
            "clientId": "en-m2m-template-client",
            "name": "Edge Node M2M Template Client",
            "description": "Client to use as basis for Roles to assign to new Edge Node M2M clients",
            "surrogateAuthRequired": false,
            "enabled": false,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": true,
            "authorizationServicesEnabled": true,
            "publicClient": false,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "clientId": "telemetry-client",
            "name": "Telemetry Client",
            "rootUrl": {{ .Values.clusterSpecific.telemetryClientRootUrl | toJson }},
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": {{ .Values.clusterSpecific.telemetryRedirectUrls | toJson }},
            "webOrigins": [
              "+"
            ],
            "protocol": "openid-connect",
            "directAccessGrantsEnabled": true,
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "client.secret.creation.time": "1683218404",
              "backchannel.logout.session.required": "true",
              "post.logout.redirect.uris": "+",
              "display.on.consent.screen": "false",
              "use.jwks.url": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "profile",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "groups",
              "offline_access"
            ]
          },
          {
            "clientId": "cluster-management-client",
            "name": "Cluster Management Client",
            "rootUrl": {{ .Values.clusterSpecific.clusterManagementClientRootUrl | toJson }},
            "adminUrl": {{ .Values.clusterSpecific.clusterManagementClientRootUrl | toJson }},
            "surrogateAuthRequired": false,
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": {{ .Values.clusterSpecific.clusterManagementRedirectUrls | toJson }},
            "webOrigins": [
              "+"
            ],
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false",
              "use.refresh.tokens": "true",
              "oidc.ciba.grant.enabled": "false",
              "backchannel.logout.session.required": "true",
              "client_credentials.use_refresh_token": "false",
              "require.pushed.authorization.requests": "false",
              "tls.client.certificate.bound.access.tokens": "false",
              "display.on.consent.screen": "false",
              "token.response.type.bearer.lower-case": "false",
            },
            "fullScopeAllowed": true,
            "protocolMappers": [
              {
                "name": "Group Path",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-group-membership-mapper",
                "consentRequired": false,
                "config": {
                  "full.path": "true",
                  "id.token.claim": "false",
                  "access.token.claim": "false",
                  "claim.name": "full_group_path",
                  "userinfo.token.claim": "true"
                }
              },
              {
                "name": "Groups Mapper",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-group-membership-mapper",
                "consentRequired": false,
                "config": {
                  "full.path": "false",
                  "id.token.claim": "false",
                  "access.token.claim": "false",
                  "claim.name": "groups",
                  "userinfo.token.claim": "true"
                }
              },
              {
                "name": "Client Audience",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-audience-mapper",
                "consentRequired": false,
                "config": {
                  "included.client.audience": "cluster-management-client",
                  "id.token.claim": "false",
                  "access.token.claim": "true"
                }
              }
            ],
            "defaultClientScopes": [
              "profile",
              "roles",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "groups",
              "offline_access",
            ],
            "authorizationServicesEnabled": false
          },
          {
            "clientId": "webui-client",
            "name": "WebUI Client",
            "rootUrl": {{ .Values.clusterSpecific.webuiClientRootUrl | toJson }},
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": {{ .Values.clusterSpecific.webuiRedirectUrls | toJson }},
            "webOrigins": [
              "+"
            ],
            "protocol": "openid-connect",
            "directAccessGrantsEnabled": false,
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "client.secret.creation.time": "1683218404",
              "backchannel.logout.session.required": "true",
              "post.logout.redirect.uris": "+",
              "display.on.consent.screen": "false",
              "oauth2.device.authorization.grant.enabled": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "profile",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "groups",
              "offline_access"
            ]
          },
          {
            "clientId": "docsui-client",
            "name": "DocsUI Client",
            "rootUrl": {{ .Values.clusterSpecific.docsuiClientRootUrl | toJson }},
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": {{ .Values.clusterSpecific.docsuiRedirectUrls | toJson }},
            "webOrigins": [
              "+"
            ],
            "protocol": "openid-connect",
            "directAccessGrantsEnabled": false,
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "client.secret.creation.time": "1683218404",
              "backchannel.logout.session.required": "true",
              "post.logout.redirect.uris": "+",
              "display.on.consent.screen": "false",
              "oauth2.device.authorization.grant.enabled": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "profile",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "groups",
              "offline_access"
            ]
          },
          {
            "clientId": "system-client",
            "name": "System Client",
            "surrogateAuthRequired": false,
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [],
            "webOrigins": [],
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "oauth2.device.authorization.grant.enabled": "true",
              "backchannel.logout.session.required": "true",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "profile",
              "email",
              "basic"
            ],
            "optionalClientScopes": [
              "groups",
              "offline_access"
            ]
          },
          {
            "frontchannelLogout": true,
            "standardFlowEnabled": true,
            "clientId": "registry-client",
            "name": "Registry Client",
            "rootUrl": {{ .Values.clusterSpecific.registryClientRootUrl | toJson }},
            "enabled": true,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
              "/c/oidc/callback"
            ],
            "webOrigins": [
              "+"
            ],
            "protocol": "openid-connect",
            "directAccessGrantsEnabled": true,
            "attributes": {
              "oidc.ciba.grant.enabled": "false",
              "client.secret.creation.time": "1683218404",
              "backchannel.logout.session.required": "true",
              "post.logout.redirect.uris": "+",
              "display.on.consent.screen": "false",
              "use.jwks.url": "false",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false"
            },
            "fullScopeAllowed": true,
            "defaultClientScopes": [
              "roles",
              "profile",
              "email",
              "groups",
              "basic"
            ],
            "optionalClientScopes": [
              "offline_access"
            ]
          }
        ],
        "clientScopes": [
          {
            "name": "groups",
            "description": "Groups scope",
            "type": "Optional",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "name": "groups",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-group-membership-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "full.path": "false",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "groups",
                  "userinfo.token.claim": "true",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "name": "roles",
            "description": "OpenID Connect scope for add user roles to the access token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true",
              "gui.order": "",
              "consent.screen.text": '{{"$"}}{{"{"}}roleScopeConsentText{{"}"}}'
            },
            "protocolMappers": [
              {
                "name": "realm roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "userinfo.token.claim": "true",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "realm_access.roles",
                  "jsonType.label": "String"
                }
              },
              {
                "name": "client roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-client-role-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "userinfo.token.claim": "true",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "resource_access.{{"$"}}{{"{"}}client_id{{"}"}}.roles",
                  "jsonType.label": "String"
                }
              }
            ]
          }
        ],
        "groups": [
          {
            "name": "registry-app-admin-group",
            "path": "/registry-app-admin-group",
          },
          {
            "name": "registry-app-editor-group",
            "path": "/registry-app-editor-group",
          },
          {
            "name": "registry-app-viewer-group",
            "path": "/registry-app-viewer-group",
          },
          {
            "name": "apps-m2m-service-account",
            "path": "/apps-m2m-service-account",
            "realmRoles": [
              "ao-m2m-rw",
              "co-m2m-rw"
            ]
          },
          {
            "name": "org-admin-group",
            "path": "/org-admin-group",
            "realmRoles": [
              "org-read-role",
              "org-update-role",
              "org-delete-role",
              "org-write-role"
            ]
          },
          {
            "name": "sre-admin-group",
            "path": "/sre-admin-group",
            "realmRoles": [
              "alrt-r"
            ],
            "clientRoles": {
              "account": [
                "view-profile",
                "manage-account"
              ],
              "telemetry-client": [
                "viewer"
              ]
            }
          },
          {
            "name": "iam-admin-group",
            "path": "/iam-admin-group",
            "realmRoles": [
              "admin",
              "secrets-root-role"
            ],
            "clientRoles": {
              "account": [
                "view-profile",
                "manage-account"
              ],
              "master-realm": [
                "view-users",
                "query-users",
                "manage-clients"
              ]
            }
          },
          {
            "name": "service-admin-group",
            "path": "/service-admin-group",
            "realmRoles": [
              "alrt-rx-rw",
              "rs-access-r",
              "infra-manager-core-read-role",
              "infra-manager-core-write-role",
              "alrt-rw"
            ],
            "clientRoles": {
              "account": [
                "view-profile",
                "manage-account"
              ],
              "master-realm": [
                "view-users",
                "query-users",
                "manage-clients"
              ],
              "telemetry-client": [
                "admin"
              ],
              "cluster-management-client": [
                "restricted-role",
                "standard-role",
                "base-role"
              ],
              "registry-client": [
                "registry-admin-role"
              ]
            }
          },
          {
            "name": "edge-manager-group",
            "path": "/edge-manager-group",
            "realmRoles": [
              "app-service-proxy-read-role",
              "app-service-proxy-write-role",
              "app-deployment-manager-read-role",
              "app-deployment-manager-write-role",
              "app-resource-manager-read-role",
              "app-resource-manager-write-role",
              "app-vm-console-write-role",
              "catalog-publisher-read-role",
              "catalog-publisher-write-role",
              "catalog-other-read-role",
              "catalog-other-write-role",
              "catalog-restricted-read-role",
              "catalog-restricted-write-role",
              "clusters-read-role",
              "clusters-write-role",
              "cluster-templates-read-role",
              "cluster-templates-write-role",
              "cluster-artifacts-read-role",
              "cluster-artifacts-write-role",
              "infra-manager-core-read-role",
              "alrt-rw"
            ],
            "clientRoles": {
              "telemetry-client": [
                "viewer"
              ],
              "cluster-management-client": [
                "standard-role",
                "base-role"
              ],
              "registry-client": [
                "registry-editor-role"
              ]
            }
          },
          {
            "name": "edge-operator-group",
            "path": "/edge-operator-group",
            "realmRoles": [
              "app-service-proxy-read-role",
              "app-service-proxy-write-role",
              "app-deployment-manager-read-role",
              "app-deployment-manager-write-role",
              "app-resource-manager-read-role",
              "app-resource-manager-write-role",
              "app-vm-console-write-role",
              "catalog-publisher-read-role",
              "catalog-other-read-role",
              "clusters-read-role",
              "clusters-write-role",
              "cluster-templates-read-role",
              "cluster-artifacts-read-role",
              "cluster-artifacts-write-role",
              "infra-manager-core-read-role",
              "alrt-r"
            ],
            "clientRoles": {
              "telemetry-client": [
                "viewer"
              ],
              "registry-client": [
                "registry-viewer-role"
              ]
            }
          },
          {
            "name": "host-manager-group",
            "path": "/host-manager-group",
            "realmRoles": [
              "infra-manager-core-read-role",
              "infra-manager-core-write-role"
            ],
            "clientRoles": {
              "telemetry-client": [
                "viewer"
              ]
            }
          },
          {
            "name": "sre-group",
            "path": "/sre-group",
            "realmRoles": [
              "alrt-r",
              "clusters-read-role",
              "clusters-write-role",
              "cluster-templates-read-role",
              "infra-manager-core-read-role"
            ],
            "clientRoles": {
              "telemetry-client": [
                "viewer"
              ],
              "cluster-management-client": [
                "base-role",
                "restricted-role"
              ]
            }
          }
        ],
        "users": [
          {
            "username": "service-account-alerts-m2m-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "alerts-m2m-client",
            "realmRoles": [
              "default-roles-master"
            ],
            "clientRoles": {
              "alerts-m2m-client": [
                "uma_protection"
              ],
              "master-realm": [
                "view-users"
              ]
            },
            "notBefore": 0
          },
          {
            "username": "service-account-host-manager-m2m-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "host-manager-m2m-client",
            "realmRoles": [
              "default-roles-master",
              "rs-access-r"
            ],
            "clientRoles": {
              "host-manager-m2m-client": [
                "uma_protection"
              ],
              "master-realm": [
                "query-clients",
                "manage-authorization",
                "view-clients",
                "view-users",
                "create-client",
                "manage-users",
                "manage-clients",
                "view-realm"
              ]
            },
            "notBefore": 0
          },
          {
            "username": "service-account-ktc-m2m-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "ktc-m2m-client",
            "realmRoles": [
              "admin",
              "create-realm",
              "default-roles-master",
              "rs-access-r"
            ],
            "clientRoles": {
              "ktc-m2m-client": [
                "uma_protection"
              ],
              "master-realm": [
                "query-clients",
                "manage-authorization",
                "view-clients",
                "view-users",
                "create-client",
                "manage-users",
                "manage-clients"
              ]
            },
            "notBefore": 0
          },
          {
            "username": "service-account-3rd-party-host-manager-m2m-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "3rd-party-host-manager-m2m-client",
            "realmRoles": [
              "default-roles-master",
              "rs-access-r"
            ],
            "clientRoles": {
              "3rd-party-host-manager-m2m-client": [
                "uma_protection"
              ],
              "master-realm": [
                "query-clients",
                "manage-authorization",
                "view-clients",
                "view-users",
                "create-client",
                "manage-users",
                "manage-clients",
                "view-realm",
              ]
            },
            "notBefore": 0
          },
          {
            "username": "service-account-en-m2m-template-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "en-m2m-template-client",
            "realmRoles": [
              "default-roles-master",
              "rs-access-r",
              "en-agent-rw"
            ],
            "clientRoles": {
              "en-m2m-template-client": [
                "uma_protection"
              ]
            },
            "notBefore": 0
          },
          {
            "username": "service-account-edge-manager-m2m-client",
            "enabled": true,
            "totp": false,
            "serviceAccountClientId": "edge-manager-m2m-client",
            "realmRoles": [
              "default-roles-master"
            ],
            "clientRoles": {
              "edge-manager-m2m-client": [
                "uma_protection"
              ]
            },
            "notBefore": 0,
            "groups": [
              "/edge-manager-group",
              "/apps-m2m-service-account"
            ]
          },
        ],
        "components": {
          "org.keycloak.keys.KeyProvider": [
            {
              "name": "fallback-PS512",
              "providerId": "rsa-generated",
              "subComponents": {},
              "config": {
                "keySize": [
                  "4096"
                ],
                "active": [
                  "true"
                ],
                "priority": [
                  "-100"
                ],
                "enabled": [
                  "true"
                ],
                "algorithm": [
                  "PS512"
                ]
              }
            }
          ]
        },
        "identityProviders": [
          {
            "alias": "azure-ad-sso",
            "displayName": "Example Azure AD SSO",
            "providerId": "oidc",
            "enabled": false,
            "updateProfileFirstLoginMode": "on",
            "trustEmail": false,
            "storeToken": false,
            "addReadTokenRoleOnCreate": false,
            "authenticateByDefault": false,
            "linkOnly": false,
            "firstBrokerLoginFlowAlias": "first broker login",
            "config": {
              "hideOnLoginPage": "false",
              "userInfoUrl": "https://graph.microsoft.com/oidc/userinfo",
              "validateSignature": "true",
              "acceptsPromptNoneForwardFromClient": "false",
              "clientId": "TODO-paste-clientid-from-azuread-app-reg-here",
              "tokenUrl": "https://login.microsoftonline.com/TODO-paste-tenant-id-for-azuread-tenant-here/oauth2/v2.0/token",
              "uiLocales": "false",
              "jwksUrl": "https://login.microsoftonline.com/TODO-paste-tenant-id-for-azuread-tenant-here/discovery/v2.0/keys",
              "backchannelSupported": "false",
              "issuer": "https://login.microsoftonline.com/TODO-paste-tenant-id-for-azuread-tenant-here/v2.0",
              "useJwksUrl": "true",
              "loginHint": "false",
              "pkceEnabled": "false",
              "authorizationUrl": "https://login.microsoftonline.com/TODO-paste-tenant-id-for-azuread-tenant-here/oauth2/v2.0/authorize",
              "clientAuthMethod": "client_secret_post",
              "disableUserInfo": "false",
              "logoutUrl": "https://login.microsoftonline.com/TODO-paste-tenant-id-for-azuread-tenant-here/oauth2/v2.0/logout",
              "syncMode": "IMPORT",
              "clientSecret": "dummy-value-reprovision-after-deployment",
              "passMaxAge": "false",
              "allowedClockSkew": "0"
            }
          },
          {
            "alias": "azure-b2c-sso",
            "displayName": "Example Azure B2C SSO",
            "internalId": "975fd93b-408d-4ea6-b33f-4a79e3f11afc",
            "providerId": "oidc",
            "enabled": false,
            "updateProfileFirstLoginMode": "on",
            "trustEmail": false,
            "storeToken": false,
            "addReadTokenRoleOnCreate": false,
            "authenticateByDefault": false,
            "linkOnly": false,
            "firstBrokerLoginFlowAlias": "first broker login",
            "config": {
              "validateSignature": "true",
              "hideOnLoginPage": "false",
              "tokenUrl": "https://TODO-paste-b2c-oidc-endpoint-base-url-here/token",
              "acceptsPromptNoneForwardFromClient": "false",
              "clientId": "TODO-paste-clientid-from-b2c-app-reg-here",
              "uiLocales": "false",
              "jwksUrl": "https://TODO-paste-b2c-oidc-endpoint-base-url-here/keys",
              "backchannelSupported": "false",
              "issuer": "https://TODO-paste-b2c-oidc-endpoint-base-url-here/v2.0/",
              "useJwksUrl": "true",
              "loginHint": "false",
              "pkceEnabled": "false",
              "clientAuthMethod": "client_secret_post",
              "authorizationUrl": "https://TODO-paste-b2c-oidc-endpoint-base-url-here/authorize",
              "disableUserInfo": "false",
              "logoutUrl": "https://TODO-paste-b2c-oidc-endpoint-base-url-here/logout",
              "syncMode": "IMPORT",
              "clientSecret": "dummy-value-reprovision-after-deployment",
              "passMaxAge": "false",
              "allowedClockSkew": "0",
              "guiOrder": "0",
              "defaultScope": "2064200c-be4f-436d-8578-ae04513d8d58 openid offline_access profile"
            }
          }
        ],
        "identityProviderMappers": [
          {
            "name": "iam-admin-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/iam-admin-group"
            }
          },
          {
            "name": "service-admin-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/service-admin-group"
            }
          },
          {
            "name": "edge-manager-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/edge-manager-group"
            }
          },
          {
            "name": "edge-operator-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/edge-operator-group"
            }
          },
          {
            "name": "host-manager-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/host-manager-group"
            }
          },
          {
            "name": "sre-group-mapper",
            "identityProviderAlias": "azure-ad-sso",
            "identityProviderMapper": "oidc-advanced-group-idp-mapper",
            "config": {
              "claims": "[{\"key\":\"groups\",\"value\":\"TODO-paste-azure-iam-security-group-id-here\"}]",
              "syncMode": "FORCE",
              "are.claim.values.regex": "false",
              "group": "/sre-group"
            }
          },
          {
            "name": "First Name",
            "identityProviderAlias": "azure-b2c-sso",
            "identityProviderMapper": "oidc-user-attribute-idp-mapper",
            "config": {
              "syncMode": "INHERIT",
              "are.claim.values.regex": "false",
              "claim": "First Name",
              "user.attribute": "firstName"
            }
          },
          {
            "name": "Last Name",
            "identityProviderAlias": "azure-b2c-sso",
            "identityProviderMapper": "oidc-user-attribute-idp-mapper",
            "config": {
              "syncMode": "INHERIT",
              "are.claim.values.regex": "false",
              "claim": "Last Name",
              "user.attribute": "lastName"
            }
          },
          {
            "name": "email",
            "identityProviderAlias": "azure-b2c-sso",
            "identityProviderMapper": "oidc-user-attribute-idp-mapper",
            "config": {
              "syncMode": "INHERIT",
              "are.claim.values.regex": "false",
              "claim": "Email",
              "user.attribute": "email"
            }
          }
        ]
      }
# yamllint enable rule:line-length
