# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-system-client-setup
  namespace: orch-platform
  annotations:
    # Security annotations for image registry approval
    security.approved-registries: "docker.io"
    security.image-purpose: "system-client setup for Keycloak tenant controller"
    security.image-vendor: "badouralix/curl-jq"
    security.image-verification: "community-maintained-tool"
spec:
  # Allow the job to run multiple times during upgrades
  completions: 1
  parallelism: 1
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: keycloak-system-client-setup
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: "RuntimeDefault"
      containers:
      - name: setup-client
        image: badouralix/curl-jq@sha256:fe8a5ee49f613495df3b57afa86b39f081bd1b3b9ed61248f46c3d3d7df56092
        imagePullPolicy: IfNotPresent
        env:
        - name: KEYCLOAK_URL
          value: "http://platform-keycloak.orch-platform.svc.cluster.local:8080"
        - name: ADMIN_USER
          value: "admin"
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: platform-keycloak
              key: admin-password
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "*"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          seccompProfile:
            type: "RuntimeDefault"
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "=== System Client Setup Job ==="
          echo "Keycloak URL: $KEYCLOAK_URL"
          echo "Admin User: $ADMIN_USER"
          
          # URL encode password function
          urlencode() {
            local string="${1}"
            local strlen=${#string}
            local encoded=""
            for (( pos=0 ; pos<strlen ; pos++ )); do
              c=${string:$pos:1}
              case "$c" in
                [-_.~a-zA-Z0-9] ) o="${c}" ;;
                * ) printf -v o '%%%02x' "'$c"
              esac
              encoded+="${o}"
            done
            echo "${encoded}"
          }
          
          # Wait for Keycloak
          echo "Waiting for Keycloak to be ready..."
          for i in {1..30}; do
            if curl -s -f "$KEYCLOAK_URL/realms/master/.well-known/openid_configuration" >/dev/null; then
              echo "✓ Keycloak is ready"
              break
            fi
            echo "Waiting for Keycloak... ($i/30)"
            sleep 10
          done
          
          # URL encode the password
          ENCODED_PASSWORD=$(urlencode "$ADMIN_PASSWORD")
          
          # Get admin token  
          echo "Getting admin token..."
          ADMIN_TOKEN=$(curl -s -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=password&client_id=admin-cli&username=$ADMIN_USER&password=$ENCODED_PASSWORD" \
            | jq -r ".access_token // \"null\"")
          
          if [ "$ADMIN_TOKEN" = "null" ]; then
            echo "❌ Failed to get admin token"
            exit 1
          fi
          echo "✓ Got admin token"
          
          # Check if system-client already exists
          EXISTING_CLIENT=$(curl -s "$KEYCLOAK_URL/admin/realms/master/clients?clientId=system-client" \
            -H "Authorization: Bearer $ADMIN_TOKEN")
          
          if echo "$EXISTING_CLIENT" | jq -e '.[0]' >/dev/null 2>&1; then
            echo "✓ system-client already exists"
            SYSTEM_CLIENT_ID=$(echo "$EXISTING_CLIENT" | jq -r '.[0].id')
          else
            echo "Creating system-client..."
            curl -s -X POST "$KEYCLOAK_URL/admin/realms/master/clients" \
              -H "Authorization: Bearer $ADMIN_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "system-client",
                "name": "System Client for KTC", 
                "enabled": true,
                "publicClient": true,
                "directAccessGrantsEnabled": true,
                "protocol": "openid-connect",
                "defaultClientScopes": ["web-origins", "acr", "roles", "profile", "basic", "email"]
              }'
            
            SYSTEM_CLIENT_ID=$(curl -s "$KEYCLOAK_URL/admin/realms/master/clients?clientId=system-client" \
              -H "Authorization: Bearer $ADMIN_TOKEN" | jq -r '.[0].id')
            echo "✓ system-client created with ID: $SYSTEM_CLIENT_ID"
          fi
          
          # Get or create groups scope
          GROUPS_SCOPE_ID=$(curl -s "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
            -H "Authorization: Bearer $ADMIN_TOKEN" | jq -r '.[] | select(.name == "groups") | .id')
          
          if [ -z "$GROUPS_SCOPE_ID" ] || [ "$GROUPS_SCOPE_ID" = "null" ]; then
            echo "Creating groups scope..."
            curl -s -X POST "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
              -H "Authorization: Bearer $ADMIN_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "groups",
                "description": "Groups scope for backward compatibility",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true"
                }
              }'
            
            GROUPS_SCOPE_ID=$(curl -s "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
              -H "Authorization: Bearer $ADMIN_TOKEN" | jq -r '.[] | select(.name == "groups") | .id')
          fi
          
          echo "✓ Groups scope ID: $GROUPS_SCOPE_ID"
          
          # Add groups scope to system-client
          echo "Adding groups scope to system-client..."
          curl -s -X PUT \
            "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_ID/default-client-scopes/$GROUPS_SCOPE_ID" \
            -H "Authorization: Bearer $ADMIN_TOKEN"
          
          # Test authentication with URL-encoded password
          echo "Testing system-client authentication..."
          AUTH_RESULT=$(curl -s -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=password&client_id=system-client&username=$ADMIN_USER&password=$ENCODED_PASSWORD&scope=openid profile email groups")
          
          TOKEN=$(echo "$AUTH_RESULT" | jq -r ".access_token // \"null\"")
          
          if [ "$TOKEN" != "null" ]; then
            echo "✅ SUCCESS: system-client authentication works with groups scope!"
            echo "Setup complete - system-client is ready for keycloak-tenant-controller"
          else
            echo "❌ FAILED: Authentication test failed"
            echo "Response: $AUTH_RESULT"
            exit 1
          fi