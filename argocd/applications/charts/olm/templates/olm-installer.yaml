# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

{{- if .Values.olm.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: olm-installer
  namespace: {{ .Values.olm.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: helm
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: olm-installer
    spec:
      restartPolicy: Never
      serviceAccountName: olm-installer
      containers:
      - name: olm-installer
        image: registry.k8s.io/kubectl/kubectl:v1.28.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            echo "Installing OLM {{ .Values.olm.version }}..."
            
            # Check if OLM is already installed
            if kubectl get namespace olm > /dev/null 2>&1; then
              echo "OLM namespace already exists, checking if OLM is running..."
              if kubectl get deployment olm-operator -n olm > /dev/null 2>&1; then
                echo "OLM is already installed and running!"
                exit 0
              fi
            fi
            
            # Create OLM namespace
            kubectl create namespace olm --dry-run=client -o yaml | kubectl apply -f -
            kubectl create namespace operators --dry-run=client -o yaml | kubectl apply -f -
            
            # Install OLM
            echo "Downloading and installing OLM..."
            kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/{{ .Values.olm.version }}/crds.yaml
            kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/{{ .Values.olm.version }}/olm.yaml
            
            # Wait for OLM to be ready
            echo "Waiting for OLM to be ready..."
            kubectl wait --for=condition=ready pod -l app=olm-operator -n olm --timeout=300s
            kubectl wait --for=condition=ready pod -l app=catalog-operator -n olm --timeout=300s
            
            echo "OLM installation completed successfully!"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: olm-installer
  namespace: {{ .Values.olm.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: helm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: helm
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: helm
subjects:
- kind: ServiceAccount
  name: olm-installer
  namespace: {{ .Values.olm.namespace }}
roleRef:
  kind: ClusterRole
  name: olm-installer
  apiGroup: rbac.authorization.k8s.io
{{- end }}