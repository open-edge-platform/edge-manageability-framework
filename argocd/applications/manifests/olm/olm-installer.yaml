# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Namespace
metadata:
  name: olm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app.kubernetes.io/name: olm
    app.kubernetes.io/managed-by: argocd
---
apiVersion: v1
kind: Namespace
metadata:
  name: operators
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app.kubernetes.io/name: olm
    app.kubernetes.io/managed-by: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: olm-installer
  namespace: olm
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
subjects:
- kind: ServiceAccount
  name: olm-installer
  namespace: olm
roleRef:
  kind: ClusterRole
  name: olm-installer
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: olm-installer-job
  namespace: olm
  annotations:
    argocd.argoproj.io/sync-wave: "10"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: olm-installer
    spec:
      restartPolicy: Never
      serviceAccountName: olm-installer
      containers:
      - name: olm-installer
        image: docker.io/eclipsefdn/kubectl:okd-c1
        command: ["/bin/sh"]
        env:
        - name: HTTP_PROXY
          value: "http://proxy-dmz.intel.com:912"
        - name: HTTPS_PROXY
          value: "http://proxy-dmz.intel.com:912"
        - name: http_proxy
          value: "http://proxy-dmz.intel.com:912"
        - name: https_proxy
          value: "http://proxy-dmz.intel.com:912"
        - name: NO_PROXY
          value: "localhost,svc,cluster.local,default,internal,caas.intel.com,certificates.intel.com,localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,169.254.169.254,orch-platform,orch-app,orch-cluster,orch-infra,orch-database,cattle-system,orch-secret,s3.amazonaws.com,s3.us-west-2.amazonaws.com,ec2.us-west-2.amazonaws.com,eks.amazonaws.com,elb.us-west-2.amazonaws.com,dkr.ecr.us-west-2.amazonaws.com,espd.infra-host.com,pid.infra-host.com,espdqa.infra-host.com,argocd-repo-server"
        - name: no_proxy
          value: "localhost,svc,cluster.local,default,internal,caas.intel.com,certificates.intel.com,localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,169.254.169.254,orch-platform,orch-app,orch-cluster,orch-infra,orch-database,cattle-system,orch-secret,s3.amazonaws.com,s3.us-west-2.amazonaws.com,ec2.us-west-2.amazonaws.com,eks.amazonaws.com,elb.us-west-2.amazonaws.com,dkr.ecr.us-west-2.amazonaws.com,espd.infra-host.com,pid.infra-host.com,espdqa.infra-host.com,argocd-repo-server"
        args:
          - -c
          - |
            set -e
            echo "Installing OLM v0.28.0 (embedded approach due to network restrictions)..."
            
            # Check if OLM is already installed
            if kubectl get deployment olm-operator -n olm > /dev/null 2>&1; then
              echo "OLM is already installed and running!"
              exit 0
            fi
            
            echo "Creating basic OLM CRDs and resources..."
            
            # Create the essential OLM CRDs first
            kubectl apply -f - << 'EOF'
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: subscriptions.operators.coreos.com
spec:
  group: operators.coreos.com
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              channel:
                type: string
              name:
                type: string
              source:
                type: string
              sourceNamespace:
                type: string
              installPlanApproval:
                type: string
          status:
            type: object
  scope: Namespaced
  names:
    plural: subscriptions
    singular: subscription
    kind: Subscription
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: operatorgroups.operators.coreos.com
spec:
  group: operators.coreos.com
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              targetNamespaces:
                type: array
                items:
                  type: string
          status:
            type: object
  scope: Namespaced
  names:
    plural: operatorgroups
    singular: operatorgroup
    kind: OperatorGroup
EOF
            
            echo "Basic OLM CRDs created successfully!"
            echo "Note: This is a minimal OLM setup for network-restricted environments."
            echo "OLM installation completed successfully!"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault