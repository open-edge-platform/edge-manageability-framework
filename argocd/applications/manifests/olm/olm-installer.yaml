# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: Namespace
metadata:
  name: olm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app.kubernetes.io/name: olm
    app.kubernetes.io/managed-by: argocd
---
apiVersion: v1
kind: Namespace
metadata:
  name: operators
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app.kubernetes.io/name: olm
    app.kubernetes.io/managed-by: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: olm-installer
  namespace: olm
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: olm-installer
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
subjects:
  - kind: ServiceAccount
    name: olm-installer
    namespace: olm
roleRef:
  kind: ClusterRole
  name: olm-installer
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: olm-installer-job
  namespace: olm
  annotations:
    argocd.argoproj.io/sync-wave: "10"
  labels:
    app.kubernetes.io/name: olm-installer
    app.kubernetes.io/managed-by: argocd
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: olm-installer
    spec:
      restartPolicy: Never
      serviceAccountName: olm-installer
      containers:
        - name: olm-installer
          image: docker.io/eclipsefdn/kubectl:okd-c1
          command: ["/bin/sh"]
          env:
            - name: HTTP_PROXY
              value: "http://proxy-dmz.intel.com:912"
            - name: HTTPS_PROXY
              value: "http://proxy-dmz.intel.com:912"
            - name: http_proxy
              value: "http://proxy-dmz.intel.com:912"
            - name: https_proxy
              value: "http://proxy-dmz.intel.com:912"
            - name: NO_PROXY
              value: |
                localhost,svc,cluster.local,default,internal,caas.intel.com,
                certificates.intel.com,localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,
                172.16.0.0/12,169.254.169.254,orch-platform,orch-app,orch-cluster,
                orch-infra,orch-database,cattle-system,orch-secret,s3.amazonaws.com,
                s3.us-west-2.amazonaws.com,ec2.us-west-2.amazonaws.com,eks.amazonaws.com,
                elb.us-west-2.amazonaws.com,dkr.ecr.us-west-2.amazonaws.com,
                espd.infra-host.com,pid.infra-host.com,espdqa.infra-host.com,
                argocd-repo-server
            - name: no_proxy
              value: |
                localhost,svc,cluster.local,default,internal,caas.intel.com,
                certificates.intel.com,localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,
                172.16.0.0/12,169.254.169.254,orch-platform,orch-app,orch-cluster,
                orch-infra,orch-database,cattle-system,orch-secret,s3.amazonaws.com,
                s3.us-west-2.amazonaws.com,ec2.us-west-2.amazonaws.com,eks.amazonaws.com,
                elb.us-west-2.amazonaws.com,dkr.ecr.us-west-2.amazonaws.com,
                espd.infra-host.com,pid.infra-host.com,espdqa.infra-host.com,
                argocd-repo-server
          args:
            - -c
            - |
              set -e
              echo "Installing OLM CRDs for Keycloak Operator..."

              # Create Subscriptions CRD
              echo "Creating Subscriptions CRD..."
              cat <<'EOF' | kubectl apply -f -
              apiVersion: apiextensions.k8s.io/v1
              kind: CustomResourceDefinition
              metadata:
                name: subscriptions.operators.coreos.com
              spec:
                group: operators.coreos.com
                versions:
                - name: v1alpha1
                  served: true
                  storage: true
                  schema:
                    openAPIV3Schema:
                      type: object
                      properties:
                        spec:
                          type: object
                          properties:
                            channel:
                              type: string
                            name:
                              type: string
                            source:
                              type: string
                            sourceNamespace:
                              type: string
                            installPlanApproval:
                              type: string
                        status:
                          type: object
                scope: Namespaced
                names:
                  plural: subscriptions
                  singular: subscription
                  kind: Subscription
              EOF

              # Create OperatorGroups CRD
              echo "Creating OperatorGroups CRD..."
              cat <<'EOF' | kubectl apply -f -
              apiVersion: apiextensions.k8s.io/v1
              kind: CustomResourceDefinition
              metadata:
                name: operatorgroups.operators.coreos.com
              spec:
                group: operators.coreos.com
                versions:
                - name: v1
                  served: true
                  storage: true
                  schema:
                    openAPIV3Schema:
                      type: object
                      properties:
                        spec:
                          type: object
                          properties:
                            targetNamespaces:
                              type: array
                              items:
                                type: string
                        status:
                          type: object
                scope: Namespaced
                names:
                  plural: operatorgroups
                  singular: operatorgroup
                  kind: OperatorGroup
              EOF

              echo "Verifying CRDs are available..."
              kubectl get crd subscriptions.operators.coreos.com
              kubectl get crd operatorgroups.operators.coreos.com

              echo "OLM CRDs installation completed successfully!"
              echo "Keycloak operator can now be deployed."
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
