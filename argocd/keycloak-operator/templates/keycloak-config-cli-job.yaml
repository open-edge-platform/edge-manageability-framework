# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

# Keycloak Config CLI Job - Applies realm configuration
# This job runs after Keycloak is ready to ensure clients, roles, groups, and users are created
# It's more reliable than KeycloakRealmImport CRD for complex realm imports with template variables

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-config-cli
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-config-cli
    app.kubernetes.io/instance: keycloak-config-cli
    app.kubernetes.io/version: "6.4.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config-cli-realm-master
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-config-cli
    app.kubernetes.io/instance: keycloak-config-cli
data:
  realm-master.json: |
    {
      "realm": "master",
      "accountTheme": "keycloak",
      "displayName": "Keycloak",
      "displayNameHtml": "<img src='https://raw.githubusercontent.com/open-edge-platform/orch-utils/73df5d1e99a81ae333d94b1c47dd9bef7fa03ae9/keycloak/one-edge-platform-login-title.png'></img>",
      "defaultSignatureAlgorithm": "PS512",
      "accessTokenLifespan": 3600,
      "ssoSessionIdleTimeout": 5400,
      "ssoSessionMaxLifespan": 43200,
      "passwordPolicy": "length(14) and digits(1) and specialChars(1) and upperCase(1) and lowerCase(1)",
      "bruteForceProtected": true,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 300,
      "quickLoginCheckMilliSeconds": 200,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 5,
      "roles": {
        "realm": [
          {"name": "en-agent-rw"},
          {"name": "secrets-root-role"},
          {"name": "rs-access-r"},
          {"name": "rs-proxy-r"},
          {"name": "app-service-proxy-read-role"},
          {"name": "app-service-proxy-write-role"},
          {"name": "app-deployment-manager-read-role"},
          {"name": "app-deployment-manager-write-role"},
          {"name": "app-resource-manager-read-role"},
          {"name": "app-resource-manager-write-role"},
          {"name": "app-vm-console-write-role"},
          {"name": "catalog-publisher-read-role"},
          {"name": "catalog-publisher-write-role"},
          {"name": "catalog-other-read-role"},
          {"name": "catalog-other-write-role"},
          {"name": "catalog-restricted-read-role"},
          {"name": "catalog-restricted-write-role"},
          {"name": "clusters-read-role"},
          {"name": "clusters-write-role"},
          {"name": "cluster-templates-read-role"},
          {"name": "cluster-templates-write-role"},
          {"name": "cluster-artifacts-read-role"},
          {"name": "cluster-artifacts-write-role"},
          {"name": "infra-manager-core-read-role"},
          {"name": "infra-manager-core-write-role"},
          {"name": "alrt-r"},
          {"name": "alrt-rw"},
          {"name": "alrt-rx-rw"},
          {"name": "ao-m2m-rw"},
          {"name": "co-m2m-rw"},
          {"name": "org-read-role"},
          {"name": "org-write-role"},
          {"name": "org-update-role"},
          {"name": "org-delete-role"}
        ],
        "client": {
          "account": [
            {"name": "view-profile", "clientRole": true},
            {"name": "manage-account", "clientRole": true}
          ],
          "alerts-m2m-client": [],
          "host-manager-m2m-client": [],
          "ktc-m2m-client": [],
          "3rd-party-host-manager-m2m-client": [],
          "co-manager-m2m-client": [],
          "edge-manager-m2m-client": [],
          "en-m2m-template-client": [],
          "webui-client": [],
          "docsui-client": [],
          "telemetry-client": [
            {"name": "admin", "clientRole": true},
            {"name": "viewer", "clientRole": true}
          ],
          "cluster-management-client": [
            {"name": "restricted-role", "clientRole": true},
            {"name": "standard-role", "clientRole": true},
            {"name": "base-role", "clientRole": true}
          ],
          "registry-client": [
            {"name": "registry-admin-role", "clientRole": true},
            {"name": "registry-editor-role", "clientRole": true},
            {"name": "registry-viewer-role", "clientRole": true}
          ]
        }
      },
      "clients": [
        {
          "clientId": "system-client",
          "name": "System Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["roles", "profile", "email", "basic"],
          "optionalClientScopes": ["groups", "offline_access"]
        },
        {
          "clientId": "alerts-m2m-client",
          "name": "Alerts M2M Client",
          "description": "Client for Alerts",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "host-manager-m2m-client",
          "name": "Host Manager Client",
          "description": "Client for the EN Host Manager to use in creating edgenode m2m clients",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "ktc-m2m-client",
          "name": "Keycloak Tenant Controller client",
          "description": "Client for the Keycloak Tenant Controller to use in creating Tenant specific roles and groups in Keycloak",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "groups", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "3rd-party-host-manager-m2m-client",
          "name": "3rd Party Host Manager Client",
          "description": "Client for the 3rd party Host Manager to use in creating edgenode m2m clients",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "co-manager-m2m-client",
          "name": "Cluster Orchestrator Manager Client",
          "description": "Client for the Cluster Orchestrator Manager",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "en-m2m-template-client",
          "name": "Edge Node M2M Template Client",
          "description": "Client to use as basis for Roles to assign to new Edge Node M2M clients",
          "enabled": false,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["web-origins", "acr", "profile", "roles", "email", "basic"],
          "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
        },
        {
          "clientId": "edge-manager-m2m-client",
          "name": "Edge Manager M2M Client",
          "description": "Client for the accessing Orchestrator with Edge-Manager persona",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "defaultClientScopes": ["roles", "email", "groups", "basic"],
          "optionalClientScopes": ["offline_access"]
        },
        {
          "clientId": "telemetry-client",
          "name": "Telemetry Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": ["$(env:TELEMETRY_REDIRECT_URL_1)"],
          "webOrigins": ["+"],
          "protocol": "openid-connect",
          "directAccessGrantsEnabled": true,
          "fullScopeAllowed": true,
          "rootUrl": "$(env:TELEMETRY_ROOT_URL)",
          "defaultClientScopes": ["roles", "profile", "email", "basic"],
          "optionalClientScopes": ["groups", "offline_access"]
        },
        {
          "clientId": "cluster-management-client",
          "name": "Cluster Management Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": ["$(env:CLUSTER_MANAGEMENT_REDIRECT_URL_1)", "$(env:CLUSTER_MANAGEMENT_REDIRECT_URL_2)"],
          "webOrigins": ["+"],
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": true,
          "protocol": "openid-connect",
          "fullScopeAllowed": true,
          "rootUrl": "$(env:CLUSTER_MANAGEMENT_ROOT_URL)",
          "adminUrl": "$(env:CLUSTER_MANAGEMENT_ROOT_URL)",
          "defaultClientScopes": ["profile", "roles", "email", "basic"],
          "optionalClientScopes": ["groups", "offline_access"],
          "authorizationServicesEnabled": false,
          "protocolMappers": [
            {
              "name": "Group Path",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "full_group_path",
                "userinfo.token.claim": "true"
              }
            },
            {
              "name": "Groups Mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "false",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "groups",
                "userinfo.token.claim": "true"
              }
            },
            {
              "name": "Client Audience",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "cluster-management-client",
                "id.token.claim": "false",
                "access.token.claim": "true"
              }
            }
          ]
        },
        {
          "clientId": "webui-client",
          "name": "WebUI Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": ["$(env:WEBUI_REDIRECT_URL_1)"],
          "webOrigins": ["+"],
          "protocol": "openid-connect",
          "directAccessGrantsEnabled": false,
          "fullScopeAllowed": true,
          "rootUrl": "$(env:WEBUI_ROOT_URL)",
          "defaultClientScopes": ["roles", "profile", "email", "basic"],
          "optionalClientScopes": ["groups", "offline_access"]
        },
        {
          "clientId": "docsui-client",
          "name": "DocsUI Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": ["$(env:DOCSUI_REDIRECT_URL_1)"],
          "webOrigins": ["+"],
          "protocol": "openid-connect",
          "directAccessGrantsEnabled": false,
          "fullScopeAllowed": true,
          "rootUrl": "$(env:DOCSUI_ROOT_URL)",
          "defaultClientScopes": ["roles", "profile", "email", "basic"],
          "optionalClientScopes": ["groups", "offline_access"]
        },
        {
          "clientId": "registry-client",
          "name": "Registry Client",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": ["$(env:REGISTRY_ROOT_URL)/c/oidc/callback"],
          "webOrigins": ["+"],
          "protocol": "openid-connect",
          "directAccessGrantsEnabled": true,
          "fullScopeAllowed": true,
          "rootUrl": "$(env:REGISTRY_ROOT_URL)",
          "defaultClientScopes": ["roles", "profile", "email", "groups", "basic"],
          "optionalClientScopes": ["offline_access"]
        }
      ],
      "clientScopes": [
        {
          "name": "groups",
          "description": "Groups scope",
          "type": "Optional",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "full.path": "false",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "userinfo.token.claim": "true",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String"
              }
            },
            {
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String"
              }
            }
          ]
        }
      ],
      "groups": [
        {"name": "registry-app-admin-group", "path": "/registry-app-admin-group"},
        {"name": "registry-app-editor-group", "path": "/registry-app-editor-group"},
        {"name": "registry-app-viewer-group", "path": "/registry-app-viewer-group"},
        {"name": "apps-m2m-service-account", "path": "/apps-m2m-service-account", "realmRoles": ["ao-m2m-rw", "co-m2m-rw"]},
        {"name": "org-admin-group", "path": "/org-admin-group", "realmRoles": ["org-read-role", "org-update-role", "org-delete-role", "org-write-role"]},
        {"name": "sre-admin-group", "path": "/sre-admin-group", "realmRoles": ["alrt-r"], "clientRoles": {"account": ["view-profile", "manage-account"], "telemetry-client": ["viewer"]}},
        {"name": "iam-admin-group", "path": "/iam-admin-group", "realmRoles": ["admin", "secrets-root-role"], "clientRoles": {"account": ["view-profile", "manage-account"]}},
        {"name": "service-admin-group", "path": "/service-admin-group", "realmRoles": ["alrt-rx-rw", "rs-access-r", "infra-manager-core-read-role", "infra-manager-core-write-role", "alrt-rw"], "clientRoles": {"account": ["view-profile", "manage-account"], "telemetry-client": ["admin"], "cluster-management-client": ["restricted-role", "standard-role", "base-role"], "registry-client": ["registry-admin-role"]}},
        {"name": "edge-manager-group", "path": "/edge-manager-group", "realmRoles": ["app-service-proxy-read-role", "app-service-proxy-write-role", "app-deployment-manager-read-role", "app-deployment-manager-write-role", "app-resource-manager-read-role", "app-resource-manager-write-role", "app-vm-console-write-role", "catalog-publisher-read-role", "catalog-publisher-write-role", "catalog-other-read-role", "catalog-other-write-role", "catalog-restricted-read-role", "catalog-restricted-write-role", "clusters-read-role", "clusters-write-role", "cluster-templates-read-role", "cluster-templates-write-role", "cluster-artifacts-read-role", "cluster-artifacts-write-role", "infra-manager-core-read-role", "alrt-rw"], "clientRoles": {"telemetry-client": ["viewer"], "cluster-management-client": ["standard-role", "base-role"], "registry-client": ["registry-editor-role"]}},
        {"name": "edge-operator-group", "path": "/edge-operator-group", "realmRoles": ["app-service-proxy-read-role", "app-service-proxy-write-role", "app-deployment-manager-read-role", "app-deployment-manager-write-role", "app-resource-manager-read-role", "app-resource-manager-write-role", "app-vm-console-write-role", "catalog-publisher-read-role", "catalog-other-read-role", "clusters-read-role", "clusters-write-role", "cluster-templates-read-role", "cluster-artifacts-read-role", "cluster-artifacts-write-role", "infra-manager-core-read-role", "alrt-r"], "clientRoles": {"telemetry-client": ["viewer"], "registry-client": ["registry-viewer-role"]}},
        {"name": "host-manager-group", "path": "/host-manager-group", "realmRoles": ["infra-manager-core-read-role", "infra-manager-core-write-role"], "clientRoles": {"telemetry-client": ["viewer"]}},
        {"name": "sre-group", "path": "/sre-group", "realmRoles": ["alrt-r", "clusters-read-role", "clusters-write-role", "cluster-templates-read-role", "infra-manager-core-read-role"], "clientRoles": {"telemetry-client": ["viewer"], "cluster-management-client": ["base-role", "restricted-role"]}}
      ],
      "users": [
        {"username": "service-account-alerts-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "alerts-m2m-client", "realmRoles": ["default-roles-master"], "clientRoles": {"alerts-m2m-client": ["uma_protection"], "master-realm": ["view-users"]}},
        {"username": "service-account-host-manager-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "host-manager-m2m-client", "realmRoles": ["default-roles-master", "rs-access-r"], "clientRoles": {"host-manager-m2m-client": ["uma_protection"], "master-realm": ["query-clients", "manage-authorization", "view-clients", "view-users", "create-client", "manage-users", "manage-clients", "view-realm"]}},
        {"username": "service-account-ktc-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "ktc-m2m-client", "realmRoles": ["admin", "create-realm", "default-roles-master", "rs-access-r"], "clientRoles": {"ktc-m2m-client": ["uma_protection"], "master-realm": ["query-clients", "manage-authorization", "view-clients", "view-users", "create-client", "manage-users", "manage-clients"]}},
        {"username": "service-account-3rd-party-host-manager-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "3rd-party-host-manager-m2m-client", "realmRoles": ["default-roles-master", "rs-access-r"], "clientRoles": {"3rd-party-host-manager-m2m-client": ["uma_protection"], "master-realm": ["query-clients", "manage-authorization", "view-clients", "view-users", "create-client", "manage-users", "manage-clients", "view-realm"]}},
        {"username": "service-account-en-m2m-template-client", "enabled": true, "totp": false, "serviceAccountClientId": "en-m2m-template-client", "realmRoles": ["default-roles-master", "rs-access-r", "en-agent-rw"], "clientRoles": {"en-m2m-template-client": ["uma_protection"]}},
        {"username": "service-account-edge-manager-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "edge-manager-m2m-client", "realmRoles": ["default-roles-master"], "clientRoles": {"edge-manager-m2m-client": ["uma_protection"]}, "groups": ["/edge-manager-group", "/apps-m2m-service-account"]},
        {"username": "service-account-co-manager-m2m-client", "enabled": true, "totp": false, "serviceAccountClientId": "co-manager-m2m-client", "realmRoles": ["default-roles-master", "co-m2m-rw"], "clientRoles": {"co-manager-m2m-client": ["uma_protection"], "master-realm": ["view-users"]}}
      ],
      "components": {
        "org.keycloak.keys.KeyProvider": [
          {
            "name": "fallback-PS512",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "keySize": ["4096"],
              "active": ["true"],
              "priority": ["-100"],
              "enabled": ["true"],
              "algorithm": ["PS512"]
            }
          }
        ]
      }
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-config-cli
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-config-cli
    app.kubernetes.io/instance: keycloak-config-cli
    app.kubernetes.io/version: "6.4.0"
spec:
  # Keep job in cluster for debugging; will be cleaned up by ArgoCD
  ttlSecondsAfterFinished: 3600
  backoffLimit: 5
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak-config-cli
        app.kubernetes.io/instance: keycloak-config-cli
        sidecar.istio.io/inject: "false"  # Don't inject Istio sidecar
    spec:
      serviceAccountName: keycloak-config-cli
      restartPolicy: Never
      initContainers:
        # Wait for Keycloak to be ready
        - name: wait-for-keycloak
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -e
              echo "Waiting for Keycloak to be ready..."
              MAX_ATTEMPTS=60
              ATTEMPT=0
              while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                # Simple TCP connectivity check - Keycloak listens on port 8080
                if timeout 2 sh -c "echo '' | nc -w1 platform-keycloak.keycloak-system.svc 8080" >/dev/null 2>&1; then
                  echo "Keycloak port 8080 is open!"
                  exit 0
                fi
                ATTEMPT=$((ATTEMPT + 1))
                echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Waiting for Keycloak..."
                sleep 5
              done
              echo "WARNING: Keycloak did not respond, but proceeding anyway..."
              exit 0
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      containers:
        - name: keycloak-config-cli
          # Using official adorsys image from Docker Hub (Keycloak 26 compatible)
          image: docker.io/adorsys/keycloak-config-cli:6.4.0-26
          imagePullPolicy: IfNotPresent
          env:
            - name: KEYCLOAK_URL
              value: "http://platform-keycloak.keycloak-system.svc:8080/"
            - name: KEYCLOAK_USER
              value: "admin"
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: platform-keycloak
                  key: password
            - name: KEYCLOAK_AVAILABILITYCHECK_ENABLED
              value: "true"
            - name: KEYCLOAK_AVAILABILITYCHECK_TIMEOUT
              value: "120s"
            # Enable variable substitution for dynamic template values
            - name: IMPORT_VARSUBSTITUTION_ENABLED
              value: "true"
            # Import from config directory - keycloak-config-cli will process all .json/.yaml files
            - name: IMPORT_FILES_LOCATIONS
              value: "/config/*"
            - name: IMPORT_MANAGED_GROUP
              value: "no-delete"
            - name: IMPORT_MANAGED_REQUIRED_ACTION
              value: "no-delete"
            - name: IMPORT_MANAGED_ROLE
              value: "no-delete"
            - name: IMPORT_MANAGED_CLIENT
              value: "no-delete"
            - name: IMPORT_REMOTE_STATE_ENABLED
              value: "true"
            # Dynamic URL environment variables for variable substitution in realm config
            # These will be substituted into the JSON realm config using $(env:VARIABLE_NAME) syntax
            # Set to cluster-specific values as needed; defaults are example.com values
            - name: TELEMETRY_ROOT_URL
              value: "https://telemetry.example.com"
            - name: TELEMETRY_REDIRECT_URL_1
              value: "https://telemetry.example.com/oidc/callback"
            - name: CLUSTER_MANAGEMENT_ROOT_URL
              value: "https://cluster-mgmt.example.com"
            - name: CLUSTER_MANAGEMENT_REDIRECT_URL_1
              value: "https://cluster-mgmt.example.com/oidc/callback"
            - name: CLUSTER_MANAGEMENT_REDIRECT_URL_2
              value: "https://cluster-mgmt.example.com/auth/callback"
            - name: WEBUI_ROOT_URL
              value: "https://webui.example.com"
            - name: WEBUI_REDIRECT_URL_1
              value: "https://webui.example.com/auth/callback"
            - name: DOCSUI_ROOT_URL
              value: "https://docs.example.com"
            - name: DOCSUI_REDIRECT_URL_1
              value: "https://docs.example.com/oidc/callback"
            - name: REGISTRY_ROOT_URL
              value: "https://registry.example.com"
            # Log configuration
            - name: LOGGING_LEVEL_ROOT
              value: "INFO"
            - name: LOGGING_LEVEL_KEYCLOAKCONFIGCLI
              value: "DEBUG"
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      volumes:
        - name: config
          configMap:
            name: keycloak-config-cli-realm-master
            defaultMode: 0444
        - name: tmp
          emptyDir: {}
