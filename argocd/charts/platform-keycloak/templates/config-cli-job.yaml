# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

{{- if and .Values.keycloak.enabled .Values.configCli.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.keycloak.instanceName }}-config-bootstrap
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "170"
  labels:
    app.kubernetes.io/name: keycloak-config-bootstrap
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
    app.kubernetes.io/managed-by: platform-keycloak-helm
spec:
  backoffLimit: 3
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: keycloak-config-bootstrap
        app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
        app.kubernetes.io/managed-by: platform-keycloak-helm
        # Add Keycloak labels for network policy access
        app: keycloak
        app.kubernetes.io/component: config-bootstrap
    spec:
      restartPolicy: Never
      containers:
      - name: keycloak-config-bootstrap
        image: curlimages/curl:8.4.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            
            # Set start time for duration calculation
            START_TIME=$(date)
            START_TIMESTAMP=$(date +%s)
            
            # Function to log with timestamp
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
            }
            
            # Function to log with indentation
            log_indent() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')]   $1"
            }
            
            # Function to log errors
            log_error() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >&2
            }
            
            # Function to log warnings
            log_warn() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1"
            }
            
            # Function to log success
            log_success() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] âœ“ $1"
            }
            
            log "========================================"
            log "Keycloak Configuration Bootstrap"
            log "========================================"
            log "Keycloak URL: $KEYCLOAK_URL"
            log "Keycloak User: $KEYCLOAK_USER"
            log "Job started at: $START_TIME"
            log "Container image: curlimages/curl:8.4.0"
            log "Working directory: $(pwd)"
            log ""
            
            # Log environment details
            log "Environment Details:"
            log_indent "Hostname: $(hostname)"
            log_indent "User: $(whoami)"
            log_indent "Shell: $0"
            log_indent "PATH: $PATH"
            log ""
            
            # Configure proxy settings
            log "Configuring proxy settings..."
            if [ -n "$no_proxy" ]; then
              export no_proxy="${no_proxy},platform-keycloak,platform-keycloak-service"
              log_indent "Extended existing no_proxy: $no_proxy"
            else
              export no_proxy="platform-keycloak,platform-keycloak-service"
              log_indent "Set no_proxy: $no_proxy"
            fi
            
            if [ -n "$NO_PROXY" ]; then
              export NO_PROXY="${NO_PROXY},platform-keycloak,platform-keycloak-service"
              log_indent "Extended existing NO_PROXY: $NO_PROXY"
            else
              export NO_PROXY="platform-keycloak,platform-keycloak-service"
              log_indent "Set NO_PROXY: $NO_PROXY"
            fi
            
            log "Final proxy configuration:"
            log_indent "http_proxy: ${http_proxy:-<not set>}"
            log_indent "https_proxy: ${https_proxy:-<not set>}"
            log_indent "no_proxy: $no_proxy"
            log_indent "NO_PROXY: $NO_PROXY"
            log ""
            
            # Wait for Keycloak availability
            log "Waiting for Keycloak to be available..."
            log_indent "Testing endpoint: $KEYCLOAK_URL/realms/master"
            
            KEYCLOAK_READY=false
            for i in $(seq 1 60); do
              log_indent "Attempt $i/60: Testing Keycloak connectivity..."
              
              if curl -f -s -m 10 "$KEYCLOAK_URL/realms/master" > /dev/null 2>&1; then
                log_success "Keycloak is available and responding!"
                KEYCLOAK_READY=true
                break
              else
                CURL_EXIT_CODE=$?
                log_indent "Connection failed (curl exit code: $CURL_EXIT_CODE)"
                if [ $i -lt 60 ]; then
                  log_indent "Waiting 10 seconds before retry..."
                  sleep 10
                fi
              fi
            done
            
            if [ "$KEYCLOAK_READY" = "false" ]; then
              log_error "Keycloak is not available after 10 minutes (60 attempts)"
              log_error "Final connectivity test details:"
              curl -v "$KEYCLOAK_URL/realms/master" || true
              exit 1
            fi
            log ""
            
            # Get admin token
            log "Authenticating with Keycloak admin API..."
            log_indent "Endpoint: $KEYCLOAK_URL/realms/master/protocol/openid-connect/token"
            log_indent "Username: $KEYCLOAK_USER"
            log_indent "Grant type: password"
            log_indent "Client ID: admin-cli"
            
            TOKEN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
              --data-urlencode "username=$KEYCLOAK_USER" \
              --data-urlencode "password=$KEYCLOAK_PASSWORD" \
              --data-urlencode 'grant_type=password' \
              --data-urlencode 'client_id=admin-cli' 2>&1)
            
            TOKEN_HTTP=$(echo "$TOKEN_RESPONSE" | tail -n1)
            TOKEN_BODY=$(echo "$TOKEN_RESPONSE" | head -n-1)
            
            log_indent "Authentication HTTP response code: $TOKEN_HTTP"
            
            if [ "$TOKEN_HTTP" = "200" ]; then
              TOKEN=$(echo "$TOKEN_BODY" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
              
              if [ -n "$TOKEN" ]; then
                log_success "Successfully obtained admin token"
                log_indent "Token length: ${#TOKEN} characters"
                log_indent "Token prefix: ${TOKEN:0:20}..."
                
                # Extract token expiration info if available
                EXPIRES_IN=$(echo "$TOKEN_BODY" | grep -o '"expires_in":[0-9]*' | cut -d':' -f2)
                if [ -n "$EXPIRES_IN" ]; then
                  log_indent "Token expires in: $EXPIRES_IN seconds"
                fi
              else
                log_error "Token extraction failed from response body"
                log_error "Response body: $TOKEN_BODY"
                exit 1
              fi
            else
              log_error "Authentication failed with HTTP $TOKEN_HTTP"
              log_error "Response body: $TOKEN_BODY"
              exit 1
            fi
            log ""
            
            # Validate configuration file
            log "Validating realm configuration file..."
            CONFIG_FILE="/config/realm-master.json"
            
            if [ ! -f "$CONFIG_FILE" ]; then
              log_error "Configuration file not found: $CONFIG_FILE"
              log_error "Available files in /config/:"
              ls -la /config/ || true
              exit 1
            fi
            
            FILE_SIZE=$(wc -c < "$CONFIG_FILE")
            log_success "Configuration file found: $CONFIG_FILE"
            log_indent "File size: $FILE_SIZE bytes"
            log_indent "File permissions: $(ls -l $CONFIG_FILE)"
            
            # Validate JSON syntax
            log_indent "Validating JSON syntax..."
            if command -v python3 >/dev/null 2>&1; then
              if python3 -c "import json; json.load(open('$CONFIG_FILE'))" 2>/dev/null; then
                log_success "JSON syntax validation passed"
              else
                log_error "JSON syntax validation failed"
                python3 -c "import json; json.load(open('$CONFIG_FILE'))" 2>&1 || true
                exit 1
              fi
            else
              log_indent "Python3 not available, skipping JSON validation"
            fi
            
            # Show configuration summary
            log_indent "Configuration summary:"
            if command -v python3 >/dev/null 2>&1; then
              REALM_NAME=$(python3 -c "import json; data=json.load(open('$CONFIG_FILE')); print(data.get('realm', 'unknown'))" 2>/dev/null || echo "unknown")
              CLIENTS_COUNT=$(python3 -c "import json; data=json.load(open('$CONFIG_FILE')); print(len(data.get('clients', [])))" 2>/dev/null || echo "unknown")
              GROUPS_COUNT=$(python3 -c "import json; data=json.load(open('$CONFIG_FILE')); print(len(data.get('groups', [])))" 2>/dev/null || echo "unknown")
              USERS_COUNT=$(python3 -c "import json; data=json.load(open('$CONFIG_FILE')); print(len(data.get('users', [])))" 2>/dev/null || echo "unknown")
              SCOPES_COUNT=$(python3 -c "import json; data=json.load(open('$CONFIG_FILE')); print(len(data.get('clientScopes', [])))" 2>/dev/null || echo "unknown")
              
              log_indent "  Realm: $REALM_NAME"
              log_indent "  Clients: $CLIENTS_COUNT"
              log_indent "  Groups: $GROUPS_COUNT"
              log_indent "  Users: $USERS_COUNT"
              log_indent "  Client Scopes: $SCOPES_COUNT"
            fi
            log ""
            
            # Import realm configuration
            log "Importing realm configuration..."
            log_indent "Using Keycloak partial import API"
            log_indent "Endpoint: $KEYCLOAK_URL/admin/realms/master/partialImport"
            
            IMPORT_START_TIME=$(date +%s)
            IMPORT_RESULT=$(curl -s -w "\n%{http_code}" -X POST \
              "$KEYCLOAK_URL/admin/realms/master/partialImport" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d @"$CONFIG_FILE" 2>&1)
            IMPORT_END_TIME=$(date +%s)
            IMPORT_DURATION=$((IMPORT_END_TIME - IMPORT_START_TIME))
            
            IMPORT_HTTP=$(echo "$IMPORT_RESULT" | tail -n1)
            IMPORT_BODY=$(echo "$IMPORT_RESULT" | head -n-1)
            
            log_indent "Import completed in ${IMPORT_DURATION} seconds"
            log_indent "Import HTTP response code: $IMPORT_HTTP"
            
            if [ "$IMPORT_HTTP" = "200" ] || [ "$IMPORT_HTTP" = "201" ]; then
              log_success "Realm configuration imported successfully via partial import"
              if [ -n "$IMPORT_BODY" ] && [ "$IMPORT_BODY" != "null" ]; then
                log_indent "Import response details:"
                echo "$IMPORT_BODY" | head -c 500  # Limit output to first 500 chars
                if [ ${#IMPORT_BODY} -gt 500 ]; then
                  log_indent "... (response truncated)"
                fi
              fi
              IMPORT_SUCCESS=true
            else
              log_warn "Partial import failed with HTTP $IMPORT_HTTP"
              log_indent "Import response: $IMPORT_BODY"
              
              # Try alternative approach: direct realm update
              log_indent "Attempting direct realm update as fallback..."
              
              UPDATE_START_TIME=$(date +%s)
              UPDATE_RESULT=$(curl -s -w "\n%{http_code}" -X PUT \
                "$KEYCLOAK_URL/admin/realms/master" \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -d @"$CONFIG_FILE" 2>&1)
              UPDATE_END_TIME=$(date +%s)
              UPDATE_DURATION=$((UPDATE_END_TIME - UPDATE_START_TIME))
              
              UPDATE_HTTP=$(echo "$UPDATE_RESULT" | tail -n1)
              UPDATE_BODY=$(echo "$UPDATE_RESULT" | head -n-1)
              
              log_indent "Direct update completed in ${UPDATE_DURATION} seconds"
              log_indent "Update HTTP response code: $UPDATE_HTTP"
              
              if [ "$UPDATE_HTTP" = "204" ] || [ "$UPDATE_HTTP" = "200" ]; then
                log_success "Realm updated successfully via direct update"
                IMPORT_SUCCESS=true
              else
                log_error "Both partial import and direct update failed"
                log_error "Update response: $UPDATE_BODY"
                log_warn "Continuing with scope verification anyway..."
                IMPORT_SUCCESS=false
              fi
            fi
            log ""
            
            # Verify and ensure system-client scopes
            log "Verifying system-client configuration..."
            
            # Get system-client details
            log_indent "Retrieving system-client information..."
            GET_CLIENT_START=$(date +%s)
            GET_CLIENT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients?clientId=system-client" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" 2>&1)
            GET_CLIENT_END=$(date +%s)
            GET_CLIENT_DURATION=$((GET_CLIENT_END - GET_CLIENT_START))
            
            GET_HTTP=$(echo "$GET_CLIENT" | tail -n1)
            GET_CLIENT_BODY=$(echo "$GET_CLIENT" | head -n-1)
            
            log_indent "Client lookup completed in ${GET_CLIENT_DURATION} seconds"
            log_indent "Client lookup HTTP response: $GET_HTTP"
            
            if [ "$GET_HTTP" = "200" ]; then
              # Extract system-client UUID using multiple methods for robustness
              SYSTEM_CLIENT_UUID=""
              
              # Method 1: Using grep and cut
              SYSTEM_CLIENT_UUID=$(echo "$GET_CLIENT_BODY" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)
              
              # Method 2: Using python if available and method 1 failed
              if [ -z "$SYSTEM_CLIENT_UUID" ] && command -v python3 >/dev/null 2>&1; then
                SYSTEM_CLIENT_UUID=$(echo "$GET_CLIENT_BODY" | python3 -c 'import sys,json; data=json.load(sys.stdin) if sys.stdin else []; print(data[0].get("id", "") if isinstance(data, list) and data else "")' 2>/dev/null || echo "")
              fi
              
              if [ -n "$SYSTEM_CLIENT_UUID" ]; then
                log_success "Found system-client"
                log_indent "Client UUID: $SYSTEM_CLIENT_UUID"
                
                # Get current client details
                CLIENT_DETAILS=$(curl -s -X GET \
                  "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID" \
                  -H "Authorization: Bearer $TOKEN" 2>/dev/null)
                
                if [ -n "$CLIENT_DETAILS" ]; then
                  log_indent "Client details retrieved successfully"
                  # Extract key properties
                  if command -v python3 >/dev/null 2>&1; then
                    CLIENT_ENABLED=$(echo "$CLIENT_DETAILS" | python3 -c "import sys,json; data=json.load(sys.stdin); print(data.get('enabled', 'unknown'))" 2>/dev/null)
                    CLIENT_PUBLIC=$(echo "$CLIENT_DETAILS" | python3 -c "import sys,json; data=json.load(sys.stdin); print(data.get('publicClient', 'unknown'))" 2>/dev/null)
                    log_indent "  Enabled: $CLIENT_ENABLED"
                    log_indent "  Public Client: $CLIENT_PUBLIC"
                  fi
                fi
                
                # Verify and assign required scopes
                log_indent "Verifying required client scopes..."
                REQUIRED_SCOPES="openid groups"
                
                for scope_name in $REQUIRED_SCOPES; do
                  log_indent "Processing scope: $scope_name"
                  
                  # Get all client scopes
                  SCOPE_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
                    "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
                    -H "Authorization: Bearer $TOKEN" 2>&1)
                  
                  SCOPE_HTTP=$(echo "$SCOPE_RESPONSE" | tail -n1)
                  SCOPE_BODY=$(echo "$SCOPE_RESPONSE" | head -n-1)
                  
                  log_indent "  Scope lookup HTTP response: $SCOPE_HTTP"
                  
                  if [ "$SCOPE_HTTP" = "200" ]; then
                    # Extract scope UUID
                    SCOPE_UUID=""
                    
                    # Method 1: Using grep
                    SCOPE_UUID=$(echo "$SCOPE_BODY" | grep -A5 -B5 "\"name\":\"$scope_name\"" | grep '"id":' | head -1 | grep -o '"id":"[^"]*' | cut -d'"' -f4)
                    
                    # Method 2: Using python if available
                    if [ -z "$SCOPE_UUID" ] && command -v python3 >/dev/null 2>&1; then
                      SCOPE_UUID=$(echo "$SCOPE_BODY" | SCOPE_NAME="$scope_name" python3 -c 'import sys,json,os; data=json.load(sys.stdin) if sys.stdin else []; name=os.environ.get("SCOPE_NAME",""); print(next((s.get("id","") for s in data if isinstance(data,list) and s.get("name")==name), ""))' 2>/dev/null || echo "")
                    fi
                    
                    if [ -n "$SCOPE_UUID" ]; then
                      log_indent "  Found $scope_name scope UUID: $SCOPE_UUID"
                      
                      # Check if scope is already assigned
                      log_indent "  Checking current scope assignments..."
                      CHECK_SCOPE=$(curl -s -w "\n%{http_code}" -X GET \
                        "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID/default-client-scopes" \
                        -H "Authorization: Bearer $TOKEN" 2>&1)
                      
                      CHECK_HTTP=$(echo "$CHECK_SCOPE" | tail -n1)
                      CHECK_BODY=$(echo "$CHECK_SCOPE" | head -n-1)
                      
                      log_indent "  Current scopes check HTTP response: $CHECK_HTTP"
                      
                      if [ "$CHECK_HTTP" = "200" ]; then
                        if echo "$CHECK_BODY" | grep -q "\"name\":\"$scope_name\""; then
                          log_success "  $scope_name scope already assigned"
                        else
                          log_indent "  $scope_name scope not assigned, adding it..."
                          
                          ASSIGN_START=$(date +%s)
                          ASSIGN_RESULT=$(curl -s -w "\n%{http_code}" -X PUT \
                            "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID/default-client-scopes/$SCOPE_UUID" \
                            -H "Authorization: Bearer $TOKEN" 2>&1)
                          ASSIGN_END=$(date +%s)
                          ASSIGN_DURATION=$((ASSIGN_END - ASSIGN_START))
                          
                          ASSIGN_HTTP=$(echo "$ASSIGN_RESULT" | tail -n1)
                          ASSIGN_BODY=$(echo "$ASSIGN_RESULT" | head -n-1)
                          
                          log_indent "  Scope assignment completed in ${ASSIGN_DURATION} seconds"
                          log_indent "  Assignment HTTP response: $ASSIGN_HTTP"
                          
                          if [ "$ASSIGN_HTTP" = "204" ] || [ "$ASSIGN_HTTP" = "200" ]; then
                            log_success "  Successfully assigned $scope_name scope"
                          else
                            log_error "  Failed to assign $scope_name scope"
                            log_error "  Assignment response: $ASSIGN_BODY"
                          fi
                        fi
                      else
                        log_error "  Failed to check current scopes (HTTP $CHECK_HTTP)"
                        log_error "  Response: $CHECK_BODY"
                      fi
                    else
                      log_error "  Could not find $scope_name scope UUID"
                      log_indent "  Available scopes:"
                      echo "$SCOPE_BODY" | grep -o '"name":"[^"]*' | cut -d'"' -f4 | head -10 | while read available_scope; do
                        log_indent "    - $available_scope"
                      done
                    fi
                  else
                    log_error "  Failed to retrieve client scopes (HTTP $SCOPE_HTTP)"
                    log_error "  Response: $SCOPE_BODY"
                  fi
                done
              else
                log_error "Could not extract system-client UUID from response"
                log_error "Response body: $GET_CLIENT_BODY"
              fi
            else
              log_error "Failed to retrieve system-client (HTTP $GET_HTTP)"
              log_error "Response: $GET_CLIENT_BODY"
            fi
            log ""
            
            # Comprehensive verification of final configuration
            log "Performing comprehensive configuration verification..."
            
            # Verify clients
            log_indent "Verifying configured clients..."
            CLIENTS_RESULT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients" \
              -H "Authorization: Bearer $TOKEN" 2>&1)
            
            CLIENTS_HTTP=$(echo "$CLIENTS_RESULT" | tail -n1)
            CLIENTS_BODY=$(echo "$CLIENTS_RESULT" | head -n-1)
            
            if [ "$CLIENTS_HTTP" = "200" ]; then
              log_success "Successfully retrieved client list"
              
              # Expected clients from the JSON configuration
              EXPECTED_CLIENTS="alerts-m2m-client host-manager-m2m-client ktc-m2m-client 3rd-party-host-manager-m2m-client edge-manager-m2m-client en-m2m-template-client telemetry-client cluster-management-client webui-client docsui-client system-client registry-client"
              
              log_indent "Configured clients:"
              CLIENT_LIST=$(echo "$CLIENTS_BODY" | grep -o '"clientId":"[^"]*' | cut -d'"' -f4)
              echo "$CLIENT_LIST" | while read client; do
                log_indent "  - $client"
              done
              
              log_indent "Checking for expected clients:"
              for expected_client in $EXPECTED_CLIENTS; do
                if echo "$CLIENT_LIST" | grep -q "^$expected_client$"; then
                  log_success "  âœ“ $expected_client found"
                else
                  log_warn "  âœ— $expected_client missing"
                fi
              done
            else
              log_error "Failed to retrieve clients (HTTP $CLIENTS_HTTP)"
            fi
            
            # Verify client scopes
            log_indent "Verifying client scopes..."
            SCOPES_RESULT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
              -H "Authorization: Bearer $TOKEN" 2>&1)
            
            SCOPES_HTTP=$(echo "$SCOPES_RESULT" | tail -n1)
            SCOPES_BODY=$(echo "$SCOPES_RESULT" | head -n-1)
            
            if [ "$SCOPES_HTTP" = "200" ]; then
              log_success "Successfully retrieved client scopes"
              log_indent "Available client scopes:"
              SCOPE_LIST=$(echo "$SCOPES_BODY" | grep -o '"name":"[^"]*' | cut -d'"' -f4)
              echo "$SCOPE_LIST" | while read scope; do
                log_indent "  - $scope"
              done
              
              # Check for critical scopes
              CRITICAL_SCOPES="openid groups roles profile email basic"
              log_indent "Checking for critical scopes:"
              for critical_scope in $CRITICAL_SCOPES; do
                if echo "$SCOPE_LIST" | grep -q "^$critical_scope$"; then
                  log_success "  âœ“ $critical_scope found"
                else
                  log_warn "  âœ— $critical_scope missing"
                fi
              done
            else
              log_error "Failed to retrieve client scopes (HTTP $SCOPES_HTTP)"
            fi
            
            # Verify system-client final configuration
            if [ -n "$SYSTEM_CLIENT_UUID" ]; then
              log_indent "Verifying system-client final configuration..."
              
              VERIFY_SCOPES=$(curl -s -w "\n%{http_code}" -X GET \
                "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID/default-client-scopes" \
                -H "Authorization: Bearer $TOKEN" 2>&1)
              
              VERIFY_HTTP=$(echo "$VERIFY_SCOPES" | tail -n1)
              VERIFY_BODY=$(echo "$VERIFY_SCOPES" | head -n-1)
              
              if [ "$VERIFY_HTTP" = "200" ]; then
                log_success "Successfully retrieved system-client scopes"
                log_indent "system-client assigned scopes:"
                ASSIGNED_SCOPES=$(echo "$VERIFY_BODY" | grep -o '"name":"[^"]*' | cut -d'"' -f4)
                echo "$ASSIGNED_SCOPES" | while read scope; do
                  log_indent "  - $scope"
                done
                
                # Verify critical scopes are assigned
                log_indent "Verifying critical scope assignments:"
                for critical_scope in openid groups; do
                  if echo "$ASSIGNED_SCOPES" | grep -q "^$critical_scope$"; then
                    log_success "  âœ“ $critical_scope assigned"
                  else
                    log_error "  âœ— $critical_scope not assigned"
                  fi
                done
              else
                log_error "Failed to verify system-client scopes (HTTP $VERIFY_HTTP)"
              fi
            fi
            
            # Verify groups
            log_indent "Verifying groups configuration..."
            GROUPS_RESULT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/groups" \
              -H "Authorization: Bearer $TOKEN" 2>&1)
            
            GROUPS_HTTP=$(echo "$GROUPS_RESULT" | tail -n1)
            GROUPS_BODY=$(echo "$GROUPS_RESULT" | head -n-1)
            
            if [ "$GROUPS_HTTP" = "200" ]; then
              log_success "Successfully retrieved groups"
              GROUP_COUNT=$(echo "$GROUPS_BODY" | grep -o '"name":"[^"]*' | wc -l)
              log_indent "Total groups configured: $GROUP_COUNT"
              
              if [ "$GROUP_COUNT" -gt 0 ]; then
                log_indent "Configured groups:"
                echo "$GROUPS_BODY" | grep -o '"name":"[^"]*' | cut -d'"' -f4 | head -10 | while read group; do
                  log_indent "  - $group"
                done
                if [ "$GROUP_COUNT" -gt 10 ]; then
                  log_indent "  ... and $((GROUP_COUNT - 10)) more"
                fi
              fi
            else
              log_error "Failed to retrieve groups (HTTP $GROUPS_HTTP)"
            fi
            
            # Final summary
            log ""
            log "========================================"
            log "Configuration Bootstrap Summary"
            log "========================================"
            
            END_TIME=$(date)
            TOTAL_DURATION=$(($(date +%s) - START_TIMESTAMP))
            
            log "Job completed at: $END_TIME"
            log "Total execution time: ${TOTAL_DURATION} seconds"
            
            if [ "$IMPORT_SUCCESS" = "true" ]; then
              log_success "âœ“ Realm configuration import: SUCCESS"
            else
              log_warn "âš  Realm configuration import: PARTIAL/FAILED"
            fi
            
            log_success "âœ“ System-client scope verification: COMPLETED"
            log_success "âœ“ Configuration verification: COMPLETED"
            log ""
            log "All configured components:"
            log "  â€¢ Clients: All M2M clients, UI clients, and system clients"
            log "  â€¢ Scopes: OpenID Connect scopes with protocol mappers"
            log "  â€¢ Roles: Realm and client-specific roles"
            log "  â€¢ Groups: User groups with role mappings"
            log "  â€¢ Users: Service account users for M2M clients"
            log "  â€¢ Security: Password policies and brute force protection"
            log ""
            log "âœ“ Keycloak configuration bootstrap completed successfully!"
        env:
        - name: KEYCLOAK_URL
          value: "http://{{ .Values.keycloak.instanceName }}-service:8080"
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName | quote }}
              key: {{ .Values.configCli.auth.usernameKey | quote }}
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName | quote }}
              key: {{ .Values.configCli.auth.passwordKey | quote }}
        {{- if .Values.keycloak.additionalOptions }}
        {{- range .Values.keycloak.additionalOptions }}
        {{- if or (eq .name "HTTP_PROXY") (eq .name "HTTPS_PROXY") (eq .name "NO_PROXY") }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- if eq .name "HTTP_PROXY" }}
        - name: http_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- if eq .name "HTTPS_PROXY" }}
        - name: https_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- if eq .name "NO_PROXY" }}
        - name: no_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          {{- toYaml .Values.configCli.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config
        configMap:
          name: {{ .Values.keycloak.instanceName }}-config
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: Always
{{- end }}
