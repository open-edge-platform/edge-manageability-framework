# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

{{- if and .Values.keycloak.enabled .Values.configCli.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.keycloak.instanceName }}-config-bootstrap
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "170"
  labels:
    app.kubernetes.io/name: keycloak-config-bootstrap
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
    app.kubernetes.io/managed-by: platform-keycloak-helm
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: keycloak-config-bootstrap
        app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
        app.kubernetes.io/managed-by: platform-keycloak-helm
        # Add Keycloak labels for network policy access
        app: keycloak
        app.kubernetes.io/component: config-bootstrap
    spec:
      restartPolicy: Never
      containers:
      - name: keycloak-config-bootstrap
        image: curlimages/curl:8.4.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            
            echo "========================================"
            echo "Keycloak Configuration Bootstrap"
            echo "========================================"
            echo "Keycloak URL: $KEYCLOAK_URL"
            echo "Keycloak User: $KEYCLOAK_USER"
            echo "Starting at: $(date)"
            echo ""
            
            # Append Keycloak services to no_proxy to avoid proxy issues
            if [ -n "$no_proxy" ]; then
              export no_proxy="${no_proxy},platform-keycloak,platform-keycloak-service"
            else
              export no_proxy="platform-keycloak,platform-keycloak-service"
            fi
            if [ -n "$NO_PROXY" ]; then
              export NO_PROXY="${NO_PROXY},platform-keycloak,platform-keycloak-service"
            else
              export NO_PROXY="platform-keycloak,platform-keycloak-service"
            fi
            
            echo "Proxy configuration:"
            echo "  http_proxy: ${http_proxy:-<not set>}"
            echo "  https_proxy: ${https_proxy:-<not set>}"
            echo "  no_proxy: $no_proxy"
            echo ""
            
            # Wait for Keycloak
            echo "Waiting for Keycloak to be available..."
            for i in $(seq 1 60); do
              if curl -f -s "$KEYCLOAK_URL/realms/master" > /dev/null; then
                echo "✓ Keycloak is available!"
                break
              fi
              echo "Waiting... ($i/60)"
              sleep 10
            done
            
            # Get admin token
            echo "Getting admin token..."
            TOKEN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
              --data-urlencode "username=$KEYCLOAK_USER" \
              --data-urlencode "password=$KEYCLOAK_PASSWORD" \
              --data-urlencode 'grant_type=password' \
              --data-urlencode 'client_id=admin-cli')
            
            TOKEN_HTTP=$(echo "$TOKEN_RESPONSE" | tail -n1)
            TOKEN_BODY=$(echo "$TOKEN_RESPONSE" | head -n-1)
            echo "  HTTP Code: $TOKEN_HTTP"
            
            TOKEN=$(echo "$TOKEN_BODY" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
            
            if [ -z "$TOKEN" ]; then
              echo "  ERROR: Failed to get admin token"
              echo "  Response: $TOKEN_BODY"
              exit 1
            fi
            echo "  ✓ Got admin token (length: ${#TOKEN})"
            
            # Delete existing system-client if it exists to ensure clean import
            echo "Checking for existing system-client..."
            EXISTING_CLIENT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients?clientId=system-client" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json")
            
            CHECK_HTTP=$(echo "$EXISTING_CLIENT" | tail -n1)
            EXISTING_CLIENT_BODY=$(echo "$EXISTING_CLIENT" | head -n-1)
            echo "  HTTP Code: $CHECK_HTTP"
            
            if echo "$EXISTING_CLIENT_BODY" | grep -q '"id"'; then
              echo "Existing system-client found, deleting it..."
              CLIENT_ID=$(echo "$EXISTING_CLIENT_BODY" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p' | head -n1)
              echo "  Existing client UUID: $CLIENT_ID"
              
              DELETE_RESULT=$(curl -s -w "\n%{http_code}" -X DELETE \
                "$KEYCLOAK_URL/admin/realms/master/clients/$CLIENT_ID" \
                -H "Authorization: Bearer $TOKEN")
              DELETE_HTTP=$(echo "$DELETE_RESULT" | tail -n1)
              echo "  Delete HTTP Code: $DELETE_HTTP"
              
              if [ "$DELETE_HTTP" = "204" ] || [ "$DELETE_HTTP" = "200" ]; then
                echo "  ✓ Deleted existing system-client"
              else
                echo "  WARNING: Delete returned HTTP $DELETE_HTTP"
              fi
            else
              echo "No existing system-client found"
            fi
            
            # Create the system-client
            echo "Creating system-client..."
            CLIENT_DATA='{
              "clientId": "system-client",
              "enabled": true,
              "publicClient": true,
              "directAccessGrantsEnabled": true,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "serviceAccountsEnabled": false
            }'
            
            CREATE_RESULT=$(curl -s -w "\n%{http_code}" -X POST \
              "$KEYCLOAK_URL/admin/realms/master/clients" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$CLIENT_DATA")
            
            HTTP_CODE=$(echo "$CREATE_RESULT" | tail -n1)
            echo "  HTTP Code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "201" ]; then
              echo "  ✓ system-client created successfully"
            else
              echo "  ERROR: Failed to create system-client"
              echo "$CREATE_RESULT" | head -n-1
              exit 1
            fi
            
            echo ""
            echo "Ensuring openid and groups client scopes exist..."
            
            # Create openid scope
            OPENID_SCOPE='{
              "name": "openid",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true"
              }
            }'
            OPENID_CREATE=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$OPENID_SCOPE")
            OPENID_HTTP=$(echo "$OPENID_CREATE" | tail -n1)
            if [ "$OPENID_HTTP" = "201" ]; then
              echo "  ✓ Created openid scope"
            elif [ "$OPENID_HTTP" = "409" ]; then
              echo "  ✓ openid scope already exists"
            else
              echo "  WARNING: openid scope creation returned HTTP $OPENID_HTTP"
            fi
            
            # Create groups scope - simplified without protocol mappers
            # Protocol mappers can be added later if needed
            GROUPS_SCOPE='{
              "name": "groups",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true"
              }
            }'
            GROUPS_CREATE=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$GROUPS_SCOPE")
            GROUPS_HTTP=$(echo "$GROUPS_CREATE" | tail -n1)
            GROUPS_BODY=$(echo "$GROUPS_CREATE" | head -n-1)
            
            if [ "$GROUPS_HTTP" = "201" ]; then
              echo "  ✓ Created groups scope"
              # Extract the UUID from the Location header or response
              GROUPS_UUID=$(echo "$GROUPS_BODY" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
              echo "    Groups scope UUID: $GROUPS_UUID"
              
              # Now add the protocol mapper to the created scope
              if [ -n "$GROUPS_UUID" ]; then
                echo "    Adding groups protocol mapper..."
                MAPPER_JSON='{
                  "name": "groups",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-group-membership-mapper",
                  "config": {
                    "claim.name": "groups",
                    "full.path": "false",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                }'
                MAPPER_RESULT=$(curl -s -w "\n%{http_code}" -X POST \
                  "$KEYCLOAK_URL/admin/realms/master/client-scopes/$GROUPS_UUID/protocol-mappers/models" \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "$MAPPER_JSON")
                MAPPER_HTTP=$(echo "$MAPPER_RESULT" | tail -n1)
                if [ "$MAPPER_HTTP" = "201" ]; then
                  echo "    ✓ Added protocol mapper"
                else
                  echo "    WARNING: Protocol mapper returned HTTP $MAPPER_HTTP"
                fi
              fi
            elif [ "$GROUPS_HTTP" = "409" ]; then
              echo "  ✓ groups scope already exists"
            else
              echo "  WARNING: groups scope creation returned HTTP $GROUPS_HTTP"
              echo "  Response: $GROUPS_BODY"
            fi
            
            echo "✓ Client scopes ensured"
            
            # Get the system-client UUID
            echo "Getting system-client UUID..."
            GET_CLIENT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients?clientId=system-client" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json")
            
            GET_HTTP=$(echo "$GET_CLIENT" | tail -n1)
            GET_CLIENT_BODY=$(echo "$GET_CLIENT" | head -n-1)
            echo "  HTTP Code: $GET_HTTP"
            
            SYSTEM_CLIENT_UUID=$(echo "$GET_CLIENT_BODY" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p' | head -n1)
            
            if [ -z "$SYSTEM_CLIENT_UUID" ]; then
              echo "  ERROR: Could not find system-client UUID"
              echo "  Response body: $GET_CLIENT_BODY"
              exit 1
            fi
            echo "  system-client UUID: $SYSTEM_CLIENT_UUID"
            
            # Assign default client scopes to system-client
            echo "Assigning client scopes to system-client..."
            echo "  Client UUID: $SYSTEM_CLIENT_UUID"
            
            for scope_name in openid roles profile email basic groups; do
              echo ""
              echo "  Processing scope: $scope_name"
              
              # Query for the specific scope by name
              SCOPE_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
                "$KEYCLOAK_URL/admin/realms/master/client-scopes" \
                -H "Authorization: Bearer $TOKEN")
              
              SCOPE_HTTP=$(echo "$SCOPE_RESPONSE" | tail -n1)
              SCOPE_BODY=$(echo "$SCOPE_RESPONSE" | head -n-1)
              echo "    List scopes HTTP: $SCOPE_HTTP"
              
              # Extract UUID for this specific scope
              # Use awk to find the scope object and extract its id
              SCOPE_UUID=$(echo "$SCOPE_BODY" | awk -v name="$scope_name" '
                BEGIN { RS="},"; FS="\""; found=0 }
                {
                  if ($0 ~ "\"name\":\"" name "\"") {
                    for (i=1; i<=NF; i++) {
                      if ($i == "id" && $(i+2) != "") {
                        print $(i+2);
                        found=1;
                        exit;
                      }
                    }
                  }
                }
              ')
              
              if [ -z "$SCOPE_UUID" ]; then
                echo "    WARNING: Client scope '$scope_name' not found in response, skipping"
                echo "    Available scopes:"
                echo "$SCOPE_BODY" | grep -o '"name":"[^"]*"' | head -10
                continue
              fi
              
              echo "    Found scope UUID: $SCOPE_UUID"
              echo "    Assigning to client: PUT /clients/$SYSTEM_CLIENT_UUID/default-client-scopes/$SCOPE_UUID"
              
              # Assign the scope to the client
              ASSIGN_RESULT=$(curl -s -w "\n%{http_code}" -X PUT \
                "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID/default-client-scopes/$SCOPE_UUID" \
                -H "Authorization: Bearer $TOKEN")
              
              HTTP_CODE=$(echo "$ASSIGN_RESULT" | tail -n1)
              ASSIGN_BODY=$(echo "$ASSIGN_RESULT" | head -n-1)
              
              if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
                echo "    ✓ Assigned $scope_name (HTTP $HTTP_CODE)"
              else
                echo "    ✗ Assignment FAILED: HTTP $HTTP_CODE"
                if [ -n "$ASSIGN_BODY" ]; then
                  echo "    Error response: $ASSIGN_BODY"
                fi
              fi
            done
            
            echo ""
            echo "✓ Scope assignment process completed"
            
            # Verify the scopes were actually assigned
            echo ""
            echo "Verifying assigned scopes..."
            VERIFY_RESULT=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients/$SYSTEM_CLIENT_UUID/default-client-scopes" \
              -H "Authorization: Bearer $TOKEN")
            
            VERIFY_HTTP=$(echo "$VERIFY_RESULT" | tail -n1)
            VERIFY_BODY=$(echo "$VERIFY_RESULT" | head -n-1)
            
            echo "  HTTP Code: $VERIFY_HTTP"
            if [ "$VERIFY_HTTP" = "200" ]; then
              echo "  Assigned scopes:"
              echo "$VERIFY_BODY" | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | while read scope; do
                echo "    - $scope"
              done
            else
              echo "  WARNING: Could not verify scopes (HTTP $VERIFY_HTTP)"
            fi
            
            echo ""
            echo "✓ Keycloak configuration bootstrap completed!"
        env:
        - name: KEYCLOAK_URL
          value: "http://{{ .Values.keycloak.instanceName }}-service:8080"
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName }}
              key: {{ .Values.configCli.auth.usernameKey }}
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName }}
              key: {{ .Values.configCli.auth.passwordKey }}
        {{- if .Values.keycloak.additionalOptions }}
        {{- range .Values.keycloak.additionalOptions }}
        {{- if or (eq .name "HTTP_PROXY") (eq .name "HTTPS_PROXY") (eq .name "NO_PROXY") }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- if eq .name "HTTP_PROXY" }}
        - name: http_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- if eq .name "HTTPS_PROXY" }}
        - name: https_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- if eq .name "NO_PROXY" }}
        - name: no_proxy
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          {{- toYaml .Values.configCli.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config
        configMap:
          name: {{ .Values.keycloak.instanceName }}-config
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: Always
{{- end }}
