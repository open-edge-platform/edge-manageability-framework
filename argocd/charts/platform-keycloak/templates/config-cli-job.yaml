# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

{{- if and .Values.keycloak.enabled .Values.configCli.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.keycloak.instanceName }}-config-bootstrap
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "170"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  labels:
    app.kubernetes.io/name: keycloak-config-bootstrap
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
    app.kubernetes.io/managed-by: platform-keycloak-helm
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: keycloak-config-bootstrap
        app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
        app.kubernetes.io/managed-by: platform-keycloak-helm
        # Add Keycloak labels for network policy access
        app: keycloak
        app.kubernetes.io/component: config-bootstrap
    spec:
      restartPolicy: Never
      containers:
      - name: keycloak-config-bootstrap
        image: {{ .Values.configCli.image }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            echo "Starting Keycloak configuration bootstrap..."
            
            # Wait for Keycloak to be ready with retries
            echo "Waiting for Keycloak to be available..."
            MAX_RETRIES=60
            RETRY_COUNT=0
            until curl -f -s "$KEYCLOAK_URL/realms/master" > /dev/null; do
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                echo "ERROR: Keycloak did not become available after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "Waiting for Keycloak... (attempt $RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            done
            echo "Keycloak is available!"
            
            # Get admin token with retry (POSIX-compliant, no functions)
            echo "Getting admin access token..."
            retries=0
            max_retries=5
            TOKEN=""
            
            while [ $retries -lt $max_retries ]; do
              echo "Token attempt $((retries + 1))/$max_retries..."
              
              response=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "username=$KEYCLOAK_USER" \
                -d "password=$KEYCLOAK_PASSWORD" \
                -d "grant_type=password" \
                -d "client_id=admin-cli")
              
              http_code=$(echo "$response" | tail -n1)
              body=$(echo "$response" | sed '$d')
              
              if [ "$http_code" = "200" ]; then
                TOKEN=$(echo "$body" | sed -n 's/.*"access_token":"\([^"]*\)".*/\1/p')
                if [ -n "$TOKEN" ]; then
                  echo "✓ Got access token successfully"
                  break
                fi
              fi
              
              echo "Failed to get token (HTTP $http_code), retrying..."
              retries=$((retries + 1))
              sleep 5
            done
            
            if [ -z "$TOKEN" ]; then
              echo "ERROR: Failed to get access token after $max_retries attempts"
              exit 1
            fi
            
            # Apply realm configuration from ConfigMap
            echo "Applying realm configuration..."
            
            # Install jq for JSON parsing
            echo "Installing jq..."
            wget -q https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64 -O /tmp/jq
            chmod +x /tmp/jq
            JQ=/tmp/jq
            
            # Read and apply each configuration file
            for config_file in /config/*; do
              if [ -f "$config_file" ]; then
                echo "Processing $config_file..."
                
                # Extract realm name from config
                REALM_NAME=$($JQ -r '.realm' "$config_file")
                echo "Configuring realm: $REALM_NAME"
                
                # Check if realm exists
                realm_response=$(curl -s -w "\n%{http_code}" -X GET "$KEYCLOAK_URL/admin/realms/$REALM_NAME" \
                  -H "Authorization: Bearer $TOKEN")
                realm_http_code=$(echo "$realm_response" | tail -n1)
                realm_body=$(echo "$realm_response" | sed '$d')
                
                if [ "$realm_http_code" = "404" ]; then
                  echo "Realm $REALM_NAME does not exist, creating..."
                  response=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/admin/realms" \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "Content-Type: application/json" \
                    -d @"$config_file")
                  
                  http_code=$(echo "$response" | tail -n1)
                  body=$(echo "$response" | sed '$d')
                  
                  if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
                    echo "✓ Realm $REALM_NAME created successfully"
                  else
                    echo "ERROR: Failed to create realm $REALM_NAME (HTTP $http_code)"
                    echo "Response: $body"
                    exit 1
                  fi
                elif [ "$realm_http_code" = "200" ]; then
                  echo "Realm $REALM_NAME exists, applying incremental updates..."
                  
                  # Update realm settings (partial update)
                  echo "Updating realm settings..."
                  realm_update=$(cat <<REALM_JSON
{
  "displayName": $($JQ -r '.displayName' "$config_file"),
  "displayNameHtml": $($JQ -r '.displayNameHtml' "$config_file"),
  "accessTokenLifespan": $($JQ -r '.accessTokenLifespan' "$config_file"),
  "ssoSessionIdleTimeout": $($JQ -r '.ssoSessionIdleTimeout' "$config_file"),
  "ssoSessionMaxLifespan": $($JQ -r '.ssoSessionMaxLifespan' "$config_file"),
  "passwordPolicy": $($JQ -r '.passwordPolicy' "$config_file"),
  "bruteForceProtected": $($JQ -r '.bruteForceProtected' "$config_file")
}
REALM_JSON
)
                  
                  response=$(curl -s -w "\n%{http_code}" -X PUT "$KEYCLOAK_URL/admin/realms/$REALM_NAME" \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "$realm_update")
                  http_code=$(echo "$response" | tail -n1)
                  
                  if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
                    echo "✓ Realm settings updated"
                  else
                    echo "WARNING: Failed to update realm settings (HTTP $http_code)"
                  fi
                  
                  # Create/update clients
                  echo "Processing clients..."
                  client_count=$($JQ '.clients | length' "$config_file")
                  i=0
                  while [ $i -lt $client_count ]; do
                    client=$($JQ ".clients[$i]" "$config_file")
                    client_id=$($JQ -r '.clientId' <<< "$client")
                    
                    # Check if client exists
                    existing_client=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients?clientId=$client_id" \
                      -H "Authorization: Bearer $TOKEN")
                    
                    if [ "$existing_client" = "[]" ]; then
                      echo "Creating client: $client_id"
                      response=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients" \
                        -H "Authorization: Bearer $TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$client")
                      http_code=$(echo "$response" | tail -n1)
                      
                      if [ "$http_code" = "201" ]; then
                        echo "✓ Client $client_id created"
                      else
                        echo "WARNING: Failed to create client $client_id (HTTP $http_code)"
                      fi
                    else
                      echo "Client $client_id already exists, skipping"
                    fi
                    
                    i=$((i + 1))
                  done
                  
                  echo "✓ Configuration applied to realm $REALM_NAME"
                fi
              fi
            done
            
            echo "Keycloak configuration bootstrap completed successfully!"
        env:
        - name: KEYCLOAK_URL
          value: "http://{{ .Values.keycloak.instanceName }}-service:8080"
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName }}
              key: {{ .Values.configCli.auth.usernameKey }}
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configCli.auth.secretName }}
              key: {{ .Values.configCli.auth.passwordKey }}
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          {{- toYaml .Values.configCli.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config
        configMap:
          name: {{ .Values.keycloak.instanceName }}-config
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: Always
{{- end }}
