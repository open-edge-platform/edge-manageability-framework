# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

{{- if and .Values.keycloak.enabled .Values.configCli.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "175"
  labels:
    app.kubernetes.io/name: keycloak-ktc-secret-creator
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "175"
  labels:
    app.kubernetes.io/name: keycloak-ktc-secret-creator
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "175"
  labels:
    app.kubernetes.io/name: keycloak-ktc-secret-creator
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
subjects:
- kind: ServiceAccount
  name: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
  namespace: {{ .Values.keycloak.instanceNamespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.keycloak.instanceName }}-ktc-secret
  namespace: {{ .Values.keycloak.instanceNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "180"
  labels:
    app.kubernetes.io/name: keycloak-ktc-secret
    app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
    app.kubernetes.io/managed-by: platform-keycloak-helm
spec:
  backoffLimit: 5
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: keycloak-ktc-secret
        app.kubernetes.io/instance: {{ .Values.keycloak.instanceName }}
        app: keycloak
    spec:
      serviceAccountName: {{ .Values.keycloak.instanceName }}-ktc-secret-creator
      restartPolicy: Never
      containers:
      - name: ktc-secret-creator
        image: bitnami/kubectl:1.30
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
          - -c
          - |
            set -e
            
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
            }
            
            log "Starting ktc-m2m-client secret creation job..."
            log "Keycloak URL: $KEYCLOAK_URL"
            
            # Wait for Keycloak
            log "Waiting for Keycloak to be available..."
            for i in $(seq 1 30); do
              if curl -f -s -m 5 "$KEYCLOAK_URL/realms/master" > /dev/null 2>&1; then
                log "Keycloak is available!"
                break
              fi
              if [ $i -eq 30 ]; then
                log "ERROR: Keycloak not available after 5 minutes"
                exit 1
              fi
              sleep 10
            done
            
            # Get admin token
            log "Getting admin token..."
            TOKEN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
              --data-urlencode "username=$KEYCLOAK_USER" \
              --data-urlencode "password=$KEYCLOAK_PASSWORD" \
              --data-urlencode 'grant_type=password' \
              --data-urlencode 'client_id=admin-cli' 2>&1)
            
            TOKEN_HTTP=$(echo "$TOKEN_RESPONSE" | tail -n1)
            TOKEN_BODY=$(echo "$TOKEN_RESPONSE" | head -n-1)
            
            if [ "$TOKEN_HTTP" != "200" ]; then
              log "ERROR: Failed to get admin token (HTTP $TOKEN_HTTP)"
              exit 1
            fi
            
            TOKEN=$(echo "$TOKEN_BODY" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
            
            if [ -z "$TOKEN" ]; then
              log "ERROR: Could not extract token from response"
              exit 1
            fi
            
            log "Admin token obtained successfully"
            
            # Get ktc-m2m-client UUID
            log "Looking up ktc-m2m-client..."
            CLIENT_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients?clientId=ktc-m2m-client" \
              -H "Authorization: Bearer $TOKEN" 2>&1)
            
            CLIENT_HTTP=$(echo "$CLIENT_RESPONSE" | tail -n1)
            CLIENT_BODY=$(echo "$CLIENT_RESPONSE" | head -n-1)
            
            if [ "$CLIENT_HTTP" != "200" ]; then
              log "ERROR: Failed to lookup client (HTTP $CLIENT_HTTP)"
              exit 1
            fi
            
            CLIENT_UUID=$(echo "$CLIENT_BODY" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)
            
            if [ -z "$CLIENT_UUID" ]; then
              log "ERROR: Could not find ktc-m2m-client UUID"
              exit 1
            fi
            
            log "Found ktc-m2m-client UUID: $CLIENT_UUID"
            
            # Get client secret
            log "Retrieving client secret..."
            SECRET_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
              "$KEYCLOAK_URL/admin/realms/master/clients/$CLIENT_UUID/client-secret" \
              -H "Authorization: Bearer $TOKEN" 2>&1)
            
            SECRET_HTTP=$(echo "$SECRET_RESPONSE" | tail -n1)
            SECRET_BODY=$(echo "$SECRET_RESPONSE" | head -n-1)
            
            if [ "$SECRET_HTTP" != "200" ]; then
              log "ERROR: Failed to get client secret (HTTP $SECRET_HTTP)"
              exit 1
            fi
            
            CLIENT_SECRET=$(echo "$SECRET_BODY" | grep -o '"value":"[^"]*' | cut -d'"' -f4)
            
            if [ -z "$CLIENT_SECRET" ]; then
              log "ERROR: Could not extract client secret"
              exit 1
            fi
            
            log "Client secret retrieved successfully (length: ${#CLIENT_SECRET})"
            
            # Create Kubernetes secret
            log "Creating Kubernetes secret ktc-m2m-client..."
            
            kubectl create secret generic ktc-m2m-client \
              --namespace=orch-platform \
              --from-literal=client-id=ktc-m2m-client \
              --from-literal=client-secret="$CLIENT_SECRET" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            if [ $? -eq 0 ]; then
              log "âœ“ Successfully created/updated ktc-m2m-client secret"
            else
              log "ERROR: Failed to create secret"
              exit 1
            fi
            
            log "Job completed successfully!"
        env:
        - name: KEYCLOAK_URL
          value: "http://platform-keycloak-service:8080"
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: "platform-keycloak"
              key: "username"
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "platform-keycloak"
              key: "password"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        fsGroup: 1001
{{- end }}
